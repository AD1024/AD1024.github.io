<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[HSCTF #4 WriteUp]]></title>
      <url>/2017/05/28/HSCTF-4-WriteUp/</url>
      <content type="html"><![CDATA[<p>My AP Computer Science teacher invited me to take part in this contest. It was really interesting and there were many high quality algorithm problems. The official write up comes up very slow; therefore, I decided to wirte this partial write up, which only contains problem I solved and some problems solved by my teacher.<br><a id="more"></a></p>
<h2 id="Coin-Flips"><a href="#Coin-Flips" class="headerlink" title="Coin Flips"></a>Coin Flips</h2><p><strong>Category: Algorithm</strong><br><strong>Score: 100pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>Keith has been very bored with their job as an industrial couponer lately, and so they have decided to spend their time flipping coins. The results of their coin flips are <a href="/asset/static/hsctf4/data_6162614da1c7516eb36bc61fe5ddecd3706879a5b0c87120f7ada4739f5c4942.txt">in this file</a>. Keith now wants to know how many runs of flips they found. A run is any consecutive sequence of the same flip. For example, the flips 001111101011 have three runs of length one, two runs of length two, and one run of length five. Can you help Keith count runs? The flag is the number of runs of length one, the number of runs of length two, the number of runs of length three, etc. up to the longest run in the sequence, each separated by a comma and a space. </p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Pure simulation programming problem. So EZ.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

ifstream <span class="token function">fin</span><span class="token punctuation">(</span><span class="token string">"coin.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ofstream <span class="token function">fout</span><span class="token punctuation">(</span><span class="token string">"coin.out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> idx<span class="token punctuation">[</span><span class="token number">1010000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
string x<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fin<span class="token operator">>></span>x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x3f3f3f</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> t <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">==</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token operator">++</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        idx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>maxn<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fout<span class="token operator">&lt;&lt;</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">", "</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Hidden-Polynomial"><a href="#Hidden-Polynomial" class="headerlink" title="Hidden Polynomial"></a>Hidden Polynomial</h2><p><strong>Category: Cyptography</strong><br><strong>Score: 100pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement-1"><a href="#Statement-1" class="headerlink" title="Statement"></a>Statement</h3><p>Alice is sending a top secret polynomial, $P(x)$, to Bob. You want to know the equation of $P(x)$. In your attempts to intercept their message, you discover only two facts about P(x):</p>
<p>It’s coefficients are in the set ${0, 1, 2, …, 1000}$.<br>$P(2017) = 49189926321482294101673925793095$</p>
<p>The flag will be $P(1)$. </p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Because $P(2017) = 49189926321482294101673925793095$.Therefore, we modulus it with 2017 and we get 1. This means that there is a constant of 1 in the polynomial.<br>Second, we minus the result with 2 and then modulus it with 2017 again. We get 2. This means that the coefficient of $x$ is 2.<br>After several trial, we can find the coefficients are: $1,2,3,5,8,13,\cdots$ which is the Fibonacci sequence.Then we just use brute force search to calculate $P(1)$</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-python"><code class="language-python">fib <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1000</span>
fib<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
fib<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
cur <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fib<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fib<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>fib<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span>

ans <span class="token operator">=</span> <span class="token number">0</span>
ans2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> fib<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> ans <span class="token operator">==</span> <span class="token number">49189926321482294101673925793095</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>fib<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>cur<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    ans <span class="token operator">=</span> ans <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2017</span><span class="token operator">**</span><span class="token punctuation">(</span>cur<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>fib<span class="token punctuation">[</span>cur<span class="token punctuation">]</span>
    ans2 <span class="token operator">=</span> ans2 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">**</span><span class="token punctuation">(</span>cur<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>fib<span class="token punctuation">[</span>cur<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>fib<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>cur<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cur<span class="token operator">+=</span><span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Keithor"><a href="#Keithor" class="headerlink" title="Keithor"></a>Keithor</h2><p><strong>Category: Cryptography</strong><br><strong>Score: 100pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement-2"><a href="#Statement-2" class="headerlink" title="Statement"></a>Statement</h3><p>Too many hashes. Help Keith get to the flag! </p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>The program we need to cope with is: <a href="/asset/src/hsctf4/keithor_e3fc6b49cf950591e4e56a9d9954473e494dd9073b26908f5ad2bd9ceef89551.py">OriginalSrc.py</a></p>
<p>We find that the comparison is in base63 encrypted form. Thus first we decrypt the base64 string. Then we get a sequence of hashes:<br>    4f79807a7c47f697bd5f06beef955cfdf4fdaef8ade8edf707858fe4294d780d69d4d6a897d8598ce3142d207640ca51d8215d0d6c693873fd32c1f6e468750027b5db34b7d9ce0a79753ecc73da664a995889e0d36db4bfc68df9fc8da3d369b266e617a6158d16ccad4189f0a3dcae62d9b103b50b0d4337c96163471b423fc28f3cda29417b7280eb9321492075c5890dc033471cf91781a07001cea6696b32cdf56b2129bc76a83218bee52c830a8bfc09ec55ae372110c0cc8950ef577d32ed211d40307c3fd6684113341e603c<br>We know that MD5 encryption will return a hash string with a length of 32 and sha1 encryption will return a hash string with a length of 40. Therefore, we put the first 32 characters to some MD5 crack websites. We can get the string:<br>    NVL7OA<br>The flag is base64 encrypted form of this string:<br>    TlZMN09BCg</p>
<hr>
<h2 id="Python-Exploitation-1"><a href="#Python-Exploitation-1" class="headerlink" title="Python Exploitation 1"></a>Python Exploitation 1</h2><p><strong>Category: Exploitation</strong><br><strong>Score: 100pt</strong><br><strong>Solved By Mr.Tareen</strong></p>
<h3 id="Statment"><a href="#Statment" class="headerlink" title="Statment"></a>Statment</h3><p>Seeing a non-web exploitation problem Keith prepared their binary and c knowledge, but to their surprise, it was <a href="/asset/src/hsctf4/python_exploitation_1.py">a .py</a>! Help Keith learn to exploit python programs.</p>
<p>Netcat to 104.131.90.29:8005.</p>
<p>Note- The flag can be mistaken for an error message. </p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>We notice that the input statment:</p>
<pre class="line-numbers language-python"><code class="language-python">inp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Enter the password: "</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>dose not cast the input to any data type. Therefore, we diretctly input “thisisthepassword” and then we can get the flag.</p>
<hr>
<h2 id="Easy-Stegosaurus"><a href="#Easy-Stegosaurus" class="headerlink" title="Easy Stegosaurus"></a>Easy Stegosaurus</h2><p><strong>Category: Forensics</strong><br><strong>Score: 200pt</strong><br><strong>Solved By Mr.Tareen</strong></p>
<h3 id="Statement-3"><a href="#Statement-3" class="headerlink" title="Statement"></a>Statement</h3><p>Keith infiltrated the scary evil organization ZORE, and had to fight a cloned stegosaurus!</p>
<p>After killing the evil beast, they started to dissect the body for potential information. They found a usb containing two similar looking image files: one called <a href="/asset/image/hsctf4/logo_f99691b87b965f85c4b3a3c877667dae41a622b28a2854961e81c1110e0958b3.png">logo.png</a>, and one called <a href="/asset/image/hsctf4/changed_bc45f1089a5a88a6b429aa6f8b8a6954e71c02d45aab836b4fb43d34c34d563f.png">changed.png</a>.</p>
<p>What secret information could be contained in these strange files?</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>Use “compare” command to compare the differences between two images and then output those differences to a new image, the flag will show up.</p>
<hr>
<h2 id="KE1TH"><a href="#KE1TH" class="headerlink" title="KE1TH"></a>KE1TH</h2><p><strong>Category: Reversal</strong><br><strong>Score: 200pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement-4"><a href="#Statement-4" class="headerlink" title="Statement"></a>Statement</h3><p>Keith recently coded <a href="/asset/src/hsctf4/Keith_64823dfacef873e85d412ca2b2dd887bb5196a598901a3f98fc6d46e1ac633f9.class">a small authorization software</a> for their computer to hide personal files. Unfortunately, they hit their head and forgot their password. Now they must reverse engineer their software to regain their password. </p>
<h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>This actually is pretty easy. We can use Android Studio to decompile A.class and then we can get:<a href="/asset/src/hsctf4/decompiled.java">decomp.java</a></p>
<p>We can see that in the Constructor, the SecretKey has been initialized. </p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>aes_cbc_pkcs5<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>And this line of code set the cipher to MODE_ENCRYPT. According to the documentation on the Internet, we can use Cipher to decrypt if we have the key and the byte array that is encrypted. Therefore, we use the string in Check() method and decrypt it:</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> en<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>aes_cbc_pkcs5<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aes_cbc_pkcs5<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalBlockSizeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BadPaddingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidKeyException</span> <span class="token operator">|</span> InvalidAlgorithmParameterException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Keith-and-Dawg-2"><a href="#Keith-and-Dawg-2" class="headerlink" title="Keith and Dawg 2"></a>Keith and Dawg 2</h2><p><strong>Category: Cryptography</strong><br><strong>Score: 200pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statment-1"><a href="#Statment-1" class="headerlink" title="Statment"></a>Statment</h3><p>\===================================================================================================<br>NOTE- Do Keith and Dawg 1 first.<br>\===================================================================================================<br>The next day.<br>Keith was walking down the street, still shaken up about the events of the previous day, when a white unmarked van driving at about 80 miles per hour drove by and stopped right in front of them. Suddenly, the door slid open and five men wearing suits jumped out, grabbed Keith, and dragged them back into the van.<br>“Who are you?!” Keith asked.<br>“I’m Agent Roshan Mahanth, of the NSA,” one man replied. “And we know what you’ve been up to.”<br>“I…I don’t know what you’re talking about,” Keith replied, but the sweat pouring out of their forehead gave them away.<br>“We also know that Jakob Degen, or Shady J Dawg, as you call him, is your ‘employer’, and that you two have been very busy lately. We know about the secret files Degen has. I’ve been undercover as Jazz Money Roshan Cash for the past two months, but I have been unable to gain access. Now, you have two options. Your first option is to cooperate with us and help us find a way to hack Degen’s security measures and recover evidence that we can use against him…”<br>“Ok, I’ll do it.”<br>“Good. You’ll hear from us soon.”<br>Keith was then tossed out of the van. They got up and walked home, wondering how they could possibly get past Degen’s security measures.<br>A few days later, Keith received a mysterious phone call from an unknown number. They hesitantly picked up the phone, “Mr. Keith. We have your first assignment. Go to the intersection between Quiche Street and Keif Afenue. You will find an envelope underneath the trash can. In it, you will find a flash drive with a hash we extracted associated with Jakob Degen’s account on a website he frequents. Unfortunately, we do not know his password, as only the md5 hash is stored on the database. We do know, however, that Degen’s keyboard is broken and only the q, w, e, r, t, and y keys are functioning. Report back when you find his password. Jazz Money out.”<br>Keith immediately grabbed their coat and ran down Keif Afenue to the intersection with Quiche Street. Sure enough, they found an envelope with a flash drive underneath the trash can. They walked home and began work.<br>Find the password.<br>To be continued…</p>
<p>hash- b81b28baa97b04cf3508394d9a58caae<br>letters- q w e r t y </p>
<h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>The story is pretty long and helpless. Actually, we solved this problem in the last day of the contest. We doubted that why there were so many teams solved it but we did not… Because we thought too much on the statment.<br>In fact, we can simplely enmumerate the length of the password and the data was too weak. If we run python program, we can get the flag in about 10 seconds. </p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5

<span class="token keyword">global</span> chaList
<span class="token keyword">global</span> tar

<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> upper<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> dep <span class="token operator">==</span> upper <span class="token punctuation">:</span>
        <span class="token keyword">global</span> tar
        res <span class="token operator">=</span> md5<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> res <span class="token operator">==</span> tar <span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span> <span class="token punctuation">:</span>
        <span class="token keyword">global</span> chaList
        <span class="token keyword">for</span> i <span class="token keyword">in</span> chaList <span class="token punctuation">:</span>
            search<span class="token punctuation">(</span>dep<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> upper<span class="token punctuation">,</span> password<span class="token operator">+</span>i<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    chaList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">]</span>
    tar <span class="token operator">=</span> <span class="token string">'b81b28baa97b04cf3508394d9a58caae'</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
        search<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Digital-Digits"><a href="#Digital-Digits" class="headerlink" title="Digital Digits"></a>Digital Digits</h2><p><strong>Category: Algorithm</strong><br><strong>Score: 300pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statment-2"><a href="#Statment-2" class="headerlink" title="Statment"></a>Statment</h3><p>Keith has found a long list of digits, and as is usual for algo problems<br> in HSCTF, they would like to perform some arbitrary computations upon<br>the list for no apparent reason. Keith’s favorite number is 5, so <a href="/asset/static/hsctf4/digital_0636b59ded5db7826112b3826694054e071c56d9ce7536a1bb149765dd6c5e28.in">in the attached list</a><br> of 500,000 digits, please find the number of subsequences for which the<br> digital root is 5. Report your answer modulo 1,000,000,003.</p>
<p>Some terms:<br>Subsequence:<br> any (not necessarily consecutive) sequence of digits from the original<br>list where the digits are in their original order. For example, 135,<br>134, 123, and 25 are all subsequences of 12345.<br>Digital root: The function defined as </p>
<p><img src="/2017/05/28/HSCTF-4-WriteUp/DigRt.png" alt="Function"></p>
<p>Where the function dsum(x) is the sum of the digits of x. For example,<br>droot(12345) = droot(dsum(12345)) = droot(15) = droot(dsum(15)) = droot(6) = 6</p>
<p>Example:<br>For the sequence 12345, the subsequences 5, 14, 23, and 2345 all have a digital root of 5. Therefore, the flag if 12345 were the list would be 4. </p>
<h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>It’s a little bit hard. We can convert droot(x) to x%9. Then use dynamic programming:<br>Let dp[i][j] stands for the different ways such that sum=j by using first ith numbers.<br>Therefore:<br>$dp[i][s[i]]=1$<br>$dp[i][(j+s[i])\%9]=(dp[i][(j+s[i])\%9] + dp[i-1][j]) \% MOD$<br>Then we need to transit all information in i-1:<br>$dp[i][j] = (dp[i][j] + dp[i-1][j]) \% MOD$</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">9</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">9</span><span class="token operator">:</span>x <span class="token operator">%</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">d</span><span class="token punctuation">(</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">d</span><span class="token punctuation">(</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Pascal’s-Triangle"><a href="#Pascal’s-Triangle" class="headerlink" title="Pascal’s Triangle"></a>Pascal’s Triangle</h2><p><strong>Category: Algorithm</strong><br><strong>Score: 300pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement-5"><a href="#Statement-5" class="headerlink" title="Statement"></a>Statement</h3><p><a href="/asset/static/hsctf4/PascalsTriangle_293eb01dfec8799fc21339f16b24b38bba261252b588c53a5347d30ebda708cf.pdf">Find problem’s PDF Here~</a></p>
<h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>The second easiest algorithm problem in this contest. We just need to preprocess the Pascal’s triangle and then simulate the function.<br>We note that the maximum row number is $8000$, which is $2*p$ in the second input case. Thus we only need to preprocess first 8000 lines of the triangle. Also, the termination condtion is $n\leq p+k$ and $2\times p &gt; k$.</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> C<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">8010</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">+</span>C<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> n<span class="token operator">>=</span>k<span class="token operator">?</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mathth</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">+</span>p<span class="token operator">&lt;=</span>n <span class="token operator">or</span> <span class="token number">2</span><span class="token operator">*</span>p <span class="token operator">>=</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>p<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
        ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>
        <span class="token operator">++</span>k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token operator">%</span>mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>T<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token punctuation">,</span>p<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>p<span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token function">mathth</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p><strong>Category: Algorithm</strong><br><strong>Score: 400pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement-6"><a href="#Statement-6" class="headerlink" title="Statement"></a>Statement</h3><p>Keith starts at square (0,0) of a grid and wants to travel to (m, n) (where m,n are nonnegative integers) by moving either right or up by one unit. However, there are special circumstances - 1) there are certain points they cannot travel to, and 2) they is able to move down one unit, either once or never during their path, even if they have already reached (m, n). How many ways can they reach (m, n), mod 10000?</p>
<p>The <a href="/asset/static/hsctf4/in.txt">input file</a> is in the format:<br>m<br>n<br>K<br>x1 y1<br>x2 y2<br>.<br>.<br>.<br>xk yk<br>where m, n are as specified, and K is the positive integer that equals the number of points he cannot travel to. The next K lines below it describe the list of the points he cannot travel to.<br>Clarification- Keith cannot move to negative coordinates and their movement is confined to the rectangle with diagonal (0,0) to (m,n). </p>
<h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>A dynamic programming problem.<br>Note: Regard the index $(0,0)$ as the origin of the grid.<br>Define that $f[i][j]$ stands for different paths from $(0,0)$ to $(i,j)$<br>and $d[i][j]$ stands for different paths from$(i,j)$ to $(M,N)$<br>Therefore, the total number of different ways contain the down movement is ($f[i][j] \times d[i][j-1])\%MOD$.<br>And the total different ways that don’t contain any down movement is $f[M][N]$.Add them together to get the answer.<br><strong>Note: Be careful when dealing with the direct</strong></p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

ll f<span class="token punctuation">[</span><span class="token number">4010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll d<span class="token punctuation">[</span><span class="token number">4010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> ban<span class="token punctuation">[</span><span class="token number">4010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>
<span class="token keyword">int</span> K<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>M<span class="token operator">>></span>N<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>K<span class="token punctuation">;</span>
    <span class="token operator">++</span>M<span class="token punctuation">,</span><span class="token operator">++</span>N<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>K<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>
        ban<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/*
    ^
    |
N   |               (M,N)
    |
    |
    |
    +-------------------->
(0,0)               (M,0)
    */</span>
    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ban<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    d<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>M<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">==</span>M<span class="token operator">?</span>N<span class="token number">-1</span><span class="token operator">:</span>N<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ban<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ban<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">*</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans <span class="token operator">+</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Keith-And-Dawg-4"><a href="#Keith-And-Dawg-4" class="headerlink" title="Keith And Dawg 4"></a>Keith And Dawg 4</h2><p><strong>Category: Reversal</strong><br><strong>Score: 400pt</strong><br><strong>Solved By AD1024</strong></p>
<h3 id="Statement-7"><a href="#Statement-7" class="headerlink" title="Statement"></a>Statement</h3><p>===================================================================================================</p>
<p>NOTE: Do Keith and Dawg 2 first.</p>
<p>===================================================================================================<br>Three days passed without incident or contact from the mysterious agents of the NSA or Roshan Cash. Then, suddenly, Keith received an envelope by mail containing a flash drive and a note: Using the hash you reversed, we have accessed several of Degen’s accounts. We recovered several files, but they seem to consist of only random words that make no sense. It appears to be <a href="/asset/src/hsctf4/lock_798bdf9ecd2e05c24fee923e58200cd200b749da21cc04dcadb75001f52203ed.lolc">some sort of program</a>. -Jazz Money Roshan Cash </p>
<h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>If we search “O HAI” or some other segments of codes on the Internet, we can find that the language actually called “LOLCODE”. But the lastest version of LOLCODE is 1.2 and this version is 1.4. Therefore we cannot use online pareser to cope with this problem.<br>But we can use the references on <a href="https://en.wikipedia.org/wiki/LOLCODE" target="_blank" rel="external">Wikipeida</a>. And there is a more detailed reference:<a href="http://esolangs.org/wiki/LOLCODE" target="_blank" rel="external">Escolang</a>. And we can get this translation:<a href="/asset/static/hsctf4/translate.txt">Translation.txt</a><br>Therefore we can translate the program into a readable code. Or we can directly analyze the program. </p>
<pre class="line-numbers language-lolcode"><code class="language-lolcode"><span class="token keyword">O HAI IM</span> TABLE
    <span class="token keyword">I HAS A</span> DAWG <span class="token keyword">ITZ</span> <span class="token symbol"><span class="token keyword">A</span> YARN</span>
    <span class="token keyword">I HAS A</span> CAT2 <span class="token keyword">ITZ</span> <span class="token symbol"><span class="token keyword">A</span> NUMBR</span>
    <span class="token keyword">I HAS A</span> DOG <span class="token keyword">ITZ</span> <span class="token symbol"><span class="token keyword">A</span> NUMBR</span>
    <span class="token keyword">I HAS A</span> KAT <span class="token keyword">ITZ</span> <span class="token symbol"><span class="token keyword">A</span> NUMBAR</span>
    <span class="token keyword">I HAS A</span> FELINE <span class="token keyword">ITZ</span> <span class="token symbol"><span class="token keyword">A</span> YARN</span>
    <span class="token keyword">I HAS A</span> KIT <span class="token keyword">ITZ</span> <span class="token symbol"><span class="token keyword">A</span> NUMBAR</span>

    DAWG <span class="token keyword">R</span> <span class="token string">"CAT"</span>
    DOG <span class="token keyword">R</span> <span class="token number">17</span>
    CAT2 <span class="token keyword">R</span> <span class="token number">672</span>
    FELINE <span class="token keyword">R</span> <span class="token string">"A"</span>
    KIT <span class="token keyword">R</span> <span class="token number">92</span>
    KAT <span class="token keyword">R</span> <span class="token number">7</span>

    <span class="token keyword">HOW IZ I</span> <span class="token function">CAT</span> <span class="token keyword">YR</span> NUM
        <span class="token keyword">I HAS A</span> CAT3864 <span class="token keyword">ITZ</span> <span class="token keyword">MAEK</span> <span class="token operator">QUOSHUNT OF</span> ME<span class="token keyword">'Z</span> CAT2 <span class="token keyword">AN</span> NUM <span class="token symbol"><span class="token keyword">A</span> NUMBR</span>
        <span class="token keyword">I HAS A</span> A59CAT0 <span class="token keyword">ITZ</span> <span class="token keyword">SRS</span> <span class="token keyword">SMOOSH</span> ME<span class="token keyword">'Z</span> DAWG <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> <span class="token operator">PRODUKT OF</span> ME<span class="token keyword">'Z</span> KIT <span class="token keyword">AN</span> NUM <span class="token symbol"><span class="token keyword">A</span> NUMBR</span> <span class="token keyword">MKAY</span>
        <span class="token keyword">FOUND YR</span> <span class="token keyword">SRS</span> <span class="token keyword">SMOOSH</span> ME<span class="token keyword">'Z</span> FELINE <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> <span class="token operator">SUM OF</span> NUM <span class="token keyword">AN</span> ME<span class="token keyword">'Z</span> DOG <span class="token symbol"><span class="token keyword">A</span> YARN</span> <span class="token keyword">AN</span> ME<span class="token keyword">'Z</span> DAWG <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> <span class="token operator">MOD OF</span> NUM <span class="token keyword">AN</span> ME<span class="token keyword">'Z</span> KAT <span class="token symbol"><span class="token keyword">A</span> YARN</span> <span class="token keyword">MKAY</span>
    <span class="token keyword">IF U SAY SO</span>
<span class="token keyword">KTHX</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>In this class, we can identify 6 member variables and one memeber method. And the initial values of member variables are assigned. So the major problem is the method called “CAT”. By using the translation text file, we can find that:</p>
<pre class="line-numbers language-lolcode"><code class="language-lolcode"><span class="token keyword">I HAS A</span> CAT3864 <span class="token keyword">ITZ</span> <span class="token keyword">MAEK</span> <span class="token operator">QUOSHUNT OF</span> ME<span class="token keyword">'Z</span> CAT2 <span class="token keyword">AN</span> NUM <span class="token symbol"><span class="token keyword">A</span> NUMBR</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>can be converted to:</p>
<pre class="line-numbers language-python"><code class="language-python">CAT3864 <span class="token operator">=</span> self<span class="token punctuation">.</span>CAT2 <span class="token operator">//</span> NUM
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>and </p>
<pre class="line-numbers language-lolcode"><code class="language-lolcode"><span class="token keyword">I HAS A</span> A59CAT0 <span class="token keyword">ITZ</span> <span class="token keyword">SRS</span> <span class="token keyword">SMOOSH</span> ME<span class="token keyword">'Z</span> DAWG <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> <span class="token operator">PRODUKT OF</span> ME<span class="token keyword">'Z</span> KIT <span class="token keyword">AN</span> NUM <span class="token symbol"><span class="token keyword">A</span> NUMBR</span> <span class="token keyword">MKAY</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>can be translated to:</p>
<pre class="line-numbers language-python"><code class="language-python">A59CAT0 <span class="token operator">=</span> eval<span class="token punctuation">(</span>self<span class="token punctuation">.</span>DAWG <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>KIT <span class="token operator">*</span> NUM<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>In order to correctly run the program, the result of eval() should have assigned a value. We notice that the value of DAWG is “CAT”, therefore the only possibility is to assgin the value of CAT3864 to A59CAT0. So we can assum the code might be:</p>
<pre class="line-numbers language-python"><code class="language-python">CAT3864 <span class="token operator">=</span> self<span class="token punctuation">.</span>CAT2 <span class="token operator">//</span> NUM
A59CAT0 <span class="token operator">=</span> CAT3864
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>In this case, we can know that the value of NUM must be 42.</p>
<p>Keep going, the next line is:</p>
<pre class="line-numbers language-lolcode"><code class="language-lolcode"><span class="token keyword">FOUND YR</span> <span class="token keyword">SRS</span> <span class="token keyword">SMOOSH</span> ME<span class="token keyword">'Z</span> FELINE <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> <span class="token operator">SUM OF</span> NUM <span class="token keyword">AN</span> ME<span class="token keyword">'Z</span> DOG <span class="token symbol"><span class="token keyword">A</span> YARN</span> <span class="token keyword">AN</span> ME<span class="token keyword">'Z</span> DAWG <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> <span class="token operator">MOD OF</span> NUM <span class="token keyword">AN</span> ME<span class="token keyword">'Z</span> KAT <span class="token symbol"><span class="token keyword">A</span> YARN</span> <span class="token keyword">MKAY</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>First we parse the result of SMOOSH</p>
<pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> self<span class="token punctuation">.</span>FELINE <span class="token operator">+</span> str<span class="token punctuation">(</span>NUM <span class="token operator">+</span> self<span class="token punctuation">.</span>DOG<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>DAWG <span class="token operator">+</span> str<span class="token punctuation">(</span>NUM <span class="token operator">%</span> self<span class="token punctuation">.</span>CAT<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>We can find that the result is:A59CAT0. So the method can be simplified to:</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">CAT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> NUM<span class="token punctuation">)</span> <span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>CAT2 <span class="token operator">//</span> NUM
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Move on next class:</p>
<pre class="line-numbers language-lolcode"><code class="language-lolcode"><span class="token keyword">O HAI IM</span> MATH
    <span class="token keyword">HOW IZ I</span> <span class="token function">POWERIN</span> <span class="token keyword">YR</span> ABC <span class="token keyword">AN</span> <span class="token keyword">YR</span> DEF
        <span class="token operator">BOTH SAEM</span> DEF <span class="token keyword">AN</span> <span class="token keyword">MAEK</span> DEF <span class="token symbol"><span class="token keyword">A</span> NUMBR</span><span class="token punctuation">,</span> <span class="token keyword">O RLY?</span>
            <span class="token keyword">YA RLY</span>
            <span class="token keyword">NO WAI</span>
                <span class="token keyword">FOUND YR</span> <span class="token boolean">FAIL</span>
        <span class="token keyword">OIC</span>
        <span class="token keyword">I HAS A</span> INDEX <span class="token keyword">ITZ</span> <span class="token number">0</span>
        <span class="token keyword">I HAS A</span> NUM <span class="token keyword">ITZ</span> ABC
        <span class="token keyword">IM IN YR</span> <span class="token label string">HOUSE</span> <span class="token keyword">UPPIN</span> <span class="token keyword">YR</span> INDEX <span class="token keyword">TIL</span> <span class="token operator">BOTH SAEM</span> INDEX <span class="token keyword">AN</span> DEF
            NUM <span class="token keyword">R</span> <span class="token operator">PRODUKT OF</span> NUM <span class="token keyword">AN</span> <span class="token operator">SUM OF</span> INDEX <span class="token keyword">AN</span> <span class="token number">1</span>
        <span class="token keyword">IM OUTTA YR</span> <span class="token label string">HOUSE</span>
        <span class="token keyword">FOUND YR</span> NUM
    <span class="token keyword">IF U SAY SO</span>
<span class="token keyword">KTHX</span>
<span class="token keyword">I HAS A</span> MATHS <span class="token keyword">ITZ</span> <span class="token keyword">LIEK A</span> MATH
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>We find that there is only a memeber method in this class and it is called “POWERIN”. Then we can get:</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MATH</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">POWERIN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ABC<span class="token punctuation">,</span> DEF<span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span> DEF <span class="token operator">!=</span> int<span class="token punctuation">(</span>DEF<span class="token punctuation">)</span> <span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        NUM <span class="token operator">=</span> ABC
        INDEX <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> DEF <span class="token operator">!=</span> INDEX <span class="token punctuation">:</span>
            NUM <span class="token operator">=</span> NUM <span class="token operator">*</span> <span class="token punctuation">(</span>INDEX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            INDEX <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> NUM
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>We can translate the rest of code in this way.</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Table</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>DAWG <span class="token operator">=</span> <span class="token string">"CAT"</span>
        self<span class="token punctuation">.</span>CAT2 <span class="token operator">=</span> <span class="token number">672</span>
        self<span class="token punctuation">.</span>DOG <span class="token operator">=</span> <span class="token number">17</span>
        self<span class="token punctuation">.</span>FELINE <span class="token operator">=</span> <span class="token string">"A"</span>
        self<span class="token punctuation">.</span>KIT <span class="token operator">=</span> <span class="token number">92.0</span>
        self<span class="token punctuation">.</span>KAT <span class="token operator">=</span> <span class="token number">7.0</span>

    <span class="token keyword">def</span> <span class="token function">CAT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>CAT2 <span class="token operator">//</span> NUM

<span class="token keyword">global</span> TABLES
<span class="token keyword">global</span> MATHS
<span class="token keyword">class</span> <span class="token class-name">MATH</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">POWERIN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ABC<span class="token punctuation">,</span> DEF<span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span> DEF <span class="token operator">!=</span> int<span class="token punctuation">(</span>DEF<span class="token punctuation">)</span> <span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        NUM <span class="token operator">=</span> ABC
        INDEX <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> DEF <span class="token operator">!=</span> INDEX <span class="token punctuation">:</span>
            NUM <span class="token operator">=</span> NUM <span class="token operator">*</span> <span class="token punctuation">(</span>INDEX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            INDEX <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> NUM

<span class="token keyword">class</span> <span class="token class-name">PILE</span> <span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>LENGTH <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>MAX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        self<span class="token punctuation">.</span>ITEMS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1000</span>
    <span class="token keyword">def</span> <span class="token function">PUSHIN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ITEM<span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>MAX <span class="token operator">!=</span> max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MAX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>LENGTH<span class="token punctuation">)</span> <span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>ITEMS<span class="token punctuation">[</span>self<span class="token punctuation">.</span>LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> ITEM
            self<span class="token punctuation">.</span>MAX <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>ITEMS<span class="token punctuation">[</span>self<span class="token punctuation">.</span>LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> ITEM
        self<span class="token punctuation">.</span>LENGTH <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">POPPIN</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>LENGTH <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>LENGTH <span class="token operator">-=</span> <span class="token number">1</span>
            ITEM <span class="token operator">=</span> self<span class="token punctuation">.</span>ITEMS<span class="token punctuation">[</span>self<span class="token punctuation">.</span>LENGTH<span class="token punctuation">]</span>
            <span class="token keyword">return</span> ITEM
    <span class="token keyword">def</span> <span class="token function">GETTIN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> INDEX<span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span> INDEX <span class="token operator">==</span> min<span class="token punctuation">(</span>INDEX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>LENGTH<span class="token punctuation">)</span> <span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>ITEMS<span class="token punctuation">[</span>INDEX<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">SIZIN</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>LENGTH


<span class="token keyword">def</span> <span class="token function">CHECKIN</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">:</span>
    C <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">global</span> MATHS
    <span class="token keyword">if</span> p<span class="token punctuation">.</span>LENGTH <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>GETTIN<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">43</span> <span class="token operator">!=</span> <span class="token number">16807</span><span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">7</span> <span class="token punctuation">:</span>
            C <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> MATHS<span class="token punctuation">.</span>POWERIN<span class="token punctuation">(</span>p<span class="token punctuation">.</span>GETTIN<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>GETTIN<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">.</span>GETTIN<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">16560</span> <span class="token punctuation">:</span>
            C <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> TABLES<span class="token punctuation">.</span>CAT<span class="token punctuation">(</span>p<span class="token punctuation">.</span>GETTIN<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">16</span> <span class="token punctuation">:</span>
            C <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> C

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span> <span class="token punctuation">:</span>
    <span class="token keyword">global</span> TABLES
    <span class="token keyword">global</span> MATHS
    PIN <span class="token operator">=</span> PILE<span class="token punctuation">(</span><span class="token punctuation">)</span>
    TABLES <span class="token operator">=</span> Table<span class="token punctuation">(</span><span class="token punctuation">)</span>
    MATHS <span class="token operator">=</span> MATH<span class="token punctuation">(</span><span class="token punctuation">)</span>
    NUMA <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    PIN<span class="token punctuation">.</span>PUSHIN<span class="token punctuation">(</span>NUMA<span class="token punctuation">)</span>
    NUMB <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    PIN<span class="token punctuation">.</span>PUSHIN<span class="token punctuation">(</span>NUMB<span class="token punctuation">)</span>
    NUMC <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    PIN<span class="token punctuation">.</span>PUSHIN<span class="token punctuation">(</span>NUMC<span class="token punctuation">)</span>

    LOCK <span class="token operator">=</span> CHECKIN<span class="token punctuation">(</span>PIN<span class="token punctuation">)</span>
    <span class="token keyword">if</span> LOCK <span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Correct Flag'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Not Correct'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Therefore, we can calculate the value of $NUMA$ and we have already known the value of $NUMC$; therefore, we can calculate the value of $NUMB$. The flag will be the concatenation of $NUMA$, $NUMB$ and $NUMC$ </p>
<h2 id="Summery"><a href="#Summery" class="headerlink" title="Summery"></a>Summery</h2><p>Our team, “Digital Dragons”, got 3950 points in total in this contest. (Actually I could have solved Keith and Dawg 5 but there was no time…) I think it’s pretty good. We got international ranking 33 and rank 23 if we were in America.(BTW: we got the same score of Princeton High School). And the competition was really interesting and worth to play. </p>
]]></content>
      
        <categories>
            
            <category> Learning in BNDS </category>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNDSOJ Monthly Round #2 Solution]]></title>
      <url>/2017/04/30/BNDSOJ-Monthly-Round-2-Solution/</url>
      <content type="html"><![CDATA[<p>本次月赛出题人为：</p>
<p>Yulemao 和 MisakaTao</p>
<p>不知道为什么第二次月赛人莫名其妙地很少，不过题还不错，因此发一篇blog记录一下。</p>
<h1 id="A-等式"><a href="#A-等式" class="headerlink" title="A. 等式"></a>A. 等式</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知数列 $A$ 为 $1$ 到 $N$ 的一种排列，现在与要你回答，是否存在一种排列使得 $\Sigma_{i = 1} ^ {N}|i - A_i| = M$</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行两个整数 $N$ 和 $M$，意义如题目中所述</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出 “YES” 或 “NO”，表示存在或不存在</p>
<h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h3><pre>
3 2
</pre>

<h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h3><pre>
YES
</pre>

<h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h3><pre>
4 8
</pre>

<h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h3><pre>
YES
</pre>

<h3 id="输入样例3"><a href="#输入样例3" class="headerlink" title="输入样例3"></a>输入样例3</h3><pre>
1 1
</pre>

<h3 id="输出样例3"><a href="#输出样例3" class="headerlink" title="输出样例3"></a>输出样例3</h3><pre>
NO
</pre>

<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>本题作为月赛第一题可能有些偏简单。注意到题目要求$\Sigma_{i = 1} ^ {N} |i - A_i|$，那么可以将题目看作：将若干对数字交换位置后与其位置差值绝对值之和。因此可以考虑3中情况：</p>
<p>· 奇数位与奇数位交换</p>
<p>· 奇数位与偶数为交换</p>
<p>· 偶数位与偶数位交换</p>
<p>第1、3中情况不用说，交换后之和一定是偶数。对于第二种情况，我们可以考虑：由于交换后一定会有另一组交换使得其绝对值差之和是奇数，那么奇数+奇数依旧是偶数。</p>
<p>到这里我们就不难看出，首先判断$M$是否是偶数，然后再判断$M$是否在最大值范围内。</p>
<p>当$N$为奇数时，$0 \leq M \leq \frac{(N*N-1)}{2}$</p>
<p>当$N$为偶数时，$0 \leq M \leq \frac{N*N}{2}$</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

ll N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>M <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>M <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>N <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ll a <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">*</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> M<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            ll a <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">*</span> N<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> M<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="B-部队调遣"><a href="#B-部队调遣" class="headerlink" title="B. 部队调遣"></a>B. 部队调遣</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>众所周知，leoleo是一名星际玩家（盲人），他非常热爱RTS游戏。这天他发现了一个非常好玩的游戏，这个游戏需要你在你的各个据点之间来回调动兵力以防止敌人的偷袭，当然每次调动也会有相应的消耗。然而leoleo并不在意消耗的事情，他在意的是他一共有多少种方法可以在某两个据点之间调动兵力。聪明的你能帮帮他吗？</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行三个正整数 $n, m, q$，表示共有 $n$ 个据点，$m$ 组调动兵力的方法，$q$ 个询问。</p>
<p>接下来m行每行三个正整数 $x, y, z$，表示在 $x$ 和 $y$ 据点之间一共有 $z$ 种方法调动兵力。</p>
<p>再接下来 $q$ 行每行三个正整数 $f, t, p$，表示询问在 $f$ 和 $t$ 据点之间经过 $p$ 次兵力调动把 $f$ 据点的兵力调动到 $t$ 据点共有多少种方法。</p>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>共 $q$ 行，每行对应一个询问的输出。</p>
<h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><pre>
3 2 1
1 2 3
2 3 4
1 3 2
</pre>

<h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><pre>
12
</pre>



<h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>一眼dp，$f[i][j][k]$表示从第$i$个结点调遣到第$j$个结点$k$次的方案数。因此能轻松得到方程:$f[i][j][k]=f[i][j][k]+f[i][m][1] \times f[m][j][k-1]$</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> MOD 331240001</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

ll dp<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// i -> j p</span>
<span class="token comment" spellcheck="true">// dp[i][j][p] = dp[i][j][p] + dp[k][j][p-1] * dp[i][k][1];</span>

<span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">,</span>Q<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">></span> <span class="token string">'9'</span> <span class="token operator">||</span> ch <span class="token operator">&lt;</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    N <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    M <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Q <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">,</span>t<span class="token punctuation">,</span>p<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        f<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span><span class="token number">55</span><span class="token punctuation">;</span><span class="token operator">++</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> MOD<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        f<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="C-队列维护"><a href="#C-队列维护" class="headerlink" title="C.队列维护"></a>C.队列维护</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>ET大哥经常训练他的分身。一天，他命令他的分身排好一队，但是因为天太黑了，所以大家都不是按照自己的序号站的位置。现在ET大哥知道编号为 $i$ 的分身会第 $i$ 个来排队，且会站在现有队列的第 $a_i$ 个人后面，他希望你能帮助他维护这个队列</p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>第一行一个整数 $N$，表示分身的个数</p>
<p>第二行共 $N$ 个整数 $a_i$ ，表示第 $i$ 个分身会站在第 $a_i$ 个人的后面</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>一行 $N$ 个整数，表示最终的队列</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><pre>
5
0 1 1 3 2
</pre>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><pre>
1 3 5 2 4
</pre>

<p><strong>样例2，3，4，5详见下载</strong></p>
<h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>第一个人插在第 $0$ 个人后面，此时队列为 $1$</p>
<p>第二个人插在第 $1$ 个人后面，此时队列为 $1, 2$</p>
<p>第三个人插在第 $1$ 个人后面，此时队列为 $1, 3, 2$</p>
<p>第四个人插在第 $3$ 个人后面，此时队列为 $1, 3, 2, 4$</p>
<p>第五个人插在第 $2$ 个人后面，此时队列为 $1, 3, 5, 2, 4$</p>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于 $30\%$ 的数据，保证 $1 \le N \le 1000$</p>
<p>另有 $10\%$ 的数据，有 $a_i = 0$</p>
<p>另有 $10\%$ 的数据，有 $a_i = i - 1$</p>
<p>对于 $100\%$ 的数据，保证 $1 \le N \le 2 \times 10 ^ 5$ ，$0 \le a_i &lt; i$</p>
<p><strong>Time limit : 1s</strong></p>
<p><strong>Memory limit : 256MB</strong></p>
<h3 id="样例下载"><a href="#样例下载" class="headerlink" title="样例下载"></a>样例下载</h3><p><a href="http://bnds.tech/download.php?type=problem&amp;id=64" target="_blank" rel="external">Downloads</a></p>
<h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题出得有点好。通过观察发现，如果我们倒着做，从后往前添加人，我们只需要找到第$A_i+1$个空格然后插进去就行。因此首先将所有位置留空，然后用一个权值线段树维护队列空位。每次插入是判断当前$A_i+1$是否比左区间包含的多，如果比左区间大，那么说明我们需要往右区间走（更多空位），如果小于等于左区间所包含的空位数，那么就往左走，一直走到叶子节点。最后从左到右输出叶子节点的值就行。</p>
<h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> Node<span class="token punctuation">{</span>
    <span class="token keyword">int</span> lson<span class="token punctuation">,</span>rson<span class="token punctuation">,</span>w<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">1010000</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> N<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">201000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">201000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> lson(x) x&lt;&lt;1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> rson(x) x&lt;&lt;1|1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> Mid(x,y) (x+y)>>1 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> v(x) tree[x].v</span>
<span class="token macro property">#<span class="token directive keyword">define</span> w(x) tree[x].w</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Maintain</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">w</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token function">rson</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>lson <span class="token operator">=</span> l<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>rson <span class="token operator">=</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>p <span class="token operator">=</span> l<span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token function">rson</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Maintain</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// printf("%d\n", rt);</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>lson <span class="token operator">==</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>rson<span class="token punctuation">)</span><span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// cout&lt;&lt;w(rt)&lt;&lt;endl;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">rson</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">-</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">Maintain</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>N<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> 
        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="D-队列间距"><a href="#D-队列间距" class="headerlink" title="D.队列间距"></a>D.队列间距</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>在排好队后，ET大哥发现大家每两个人之间的间距都不太一样，于是他想到一个有趣的问题，距离第 $M$ 小的间距应该是多少呢？</p>
<p>现在共有 $N$ 个ET大哥的分身，对于第 $i$ 个分身，他的坐标为 $x_i$，他想知道第 $M$ 小的间距大小</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>第一行两个整数 $N$ 和 $M$，意义如题目中所述</p>
<p>第二行共 $N$ 个整数 $x_i$ ，表示第 $i$ 个分身的坐标位置</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>一行一个整数，表示第 $M$ 小的距离大小</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><pre>
5 8
4 8 7 2 11
</pre>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><pre>
6
</pre>

<p><strong>样例2，3，4详见下载</strong></p>
<h3 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h3><p>任意两个分身都能得到一个间距，全部算出后排序得到</p>
<p>$1,2,3,3,4,4,5,6,7,9$</p>
<p>故第八小的间距为 $6$</p>
<h3 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于 $30\%$ 的数据，保证 $1 \le N \le 1000$</p>
<p>另有 $10\%$ 的数据，任意两相邻人的距离差为定值</p>
<p>另有 $10\%$ 的数据，有 $M \le 10$</p>
<p>对于 $100\%$ 的数据，保证 $1 \le N \le 2.5 \times 10 ^ 5$ ，$1 \le M \le 2.5 \times 10 ^ 5$ ，$0 \le x_i \le 10 ^ 9$ 且没有两个人拥有同一坐标且保证 $M$ 存在</p>
<p><strong>Time limit : 1s</strong></p>
<p><strong>Memory limit : 256MB</strong></p>
<p><strong>本题数据很水，大家要有 $100$ 分的梦想</strong></p>
<h3 id="样例下载-1"><a href="#样例下载-1" class="headerlink" title="样例下载"></a>样例下载</h3><p><a href="http://bnds.tech/download.php?type=problem&amp;id=65" target="_blank" rel="external">Downloads</a> </p>
<h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>注意到这是一个一维的结构，因此暴力很好上分….(写好了有70分)。首先明确一下暴力的方法：维护一个大小不超过$M$的大根堆，每次插入时判断插入的数据是否比堆顶大，如果比堆顶大直接扔掉，否则弹出堆顶元素然后加入新的元素。这样能在最后保证堆顶元素就是所有元素第$M$小的。同时暴力前先将所有数据排序，这样能保证当$dist[j]-dist[i](i&lt;j)$时就可以跳出循环。这样的暴力算法有70分。那么如何A这题呢？我们可以考虑分治。</p>
<p>由于排序后，较小差值存在于相邻的元素之间，我们可以通过每次将数列一分为二，直到分到每块有$sqrt(N)$个元素，然后对每一块做暴力，之后合并结果。复杂度(比较玄学)$N\sqrt{N} \times \log{N} + \log{M}$</p>
<h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> lson(x) x&lt;&lt;1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> rson(x) x&lt;&lt;1|1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> fa(x) x>>1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> mid(x,y) (x+y) >> 1</span>
<span class="token keyword">int</span> M<span class="token punctuation">;</span>

priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> H<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">></span> <span class="token string">'9'</span> <span class="token operator">||</span> ch <span class="token operator">&lt;</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> dist<span class="token punctuation">[</span><span class="token number">300010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> M<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            H<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            H<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        H<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">insert</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">work</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">work</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>mid<span class="token punctuation">;</span>i<span class="token operator">>=</span>l<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">insert</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>dist<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dist<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">work</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说T1 T2难度较低，基本都能A，T3有些思维含量，需要思考一段时间。T4暴力分给得有点多….总之300分对我来说感觉有点低了，还需要继续学习。</p>
]]></content>
      
        <categories>
            
            <category> BNDSOJ Monthly Round </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> Learning in BNDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zkw线段树详解]]></title>
      <url>/2017/04/18/zkwIntervalTree/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>zkw线段树是一种非递归，处理区间问题的高效数据结构。与传统线段树不同，zkw线段树天然非递归，常数小，代码短，非常有学习价值。<br><a id="more"></a></p>
<h2 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h2><p>tree[i]: 第i号节点。由于线段树为二叉树，所以满足对于节点i，其左儿子节点编号为i*2，右儿子节点编号为i*2+1<br>tree[i].l: 该节点维护区间的左端点<br>tree[i].r: 该节点维护区间的右端点<br>tree[i].max: 该节点维护区间的最大值<br>tree[i].min: 该节点维护区间的最小值<br>tree[i].sum: 该节点维护区间的区间和<br>N: 节点总数<br>mid(x,y): (x+y)/2<br>Maintain(int rt): 维护节点编号为rt的信息<br>read(): 读入数据</p>
<h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><h3 id="传统线段树建树方法"><a href="#传统线段树建树方法" class="headerlink" title="传统线段树建树方法"></a>传统线段树建树方法</h3><p>传统线段树建树非常“朴素”。直接从根节点(通常为1)下去，一直递归到叶子然后输入信息。输入完一层就维护一下父节点。如下图所示，建树时遍历顺序为从1开始的前序遍历。<br><img src="/2017/04/18/zkwIntervalTree/tree_1.png" alt="Interval Tree"></p>
<p>代码如下：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>max <span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Maintain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>与传统线段树不同， zkw线段树先跳过所有非叶子节点，直接读入叶子节点数据，然后再逐个维护非叶子节点的信息：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> cnt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 节点计数</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cnt<span class="token operator">&lt;=</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>cnt<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开成完全二叉树</span>
    <span class="token comment" spellcheck="true">// 读入叶子节点数据</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token operator">+</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>max <span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 维护非叶子节点数据</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cnt<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Maintain</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>是不是非常好写？这里要注意，有时候这个树并非完全二叉树，但是zkw线段树要求是一个完全二叉树。因此这时候我们直接开到完全二叉树就好啦（空间换时间）。</p>
<h2 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h2><h3 id="传统线段树的单点修改"><a href="#传统线段树的单点修改" class="headerlink" title="传统线段树的单点修改"></a>传统线段树的单点修改</h3><p>传统线段树会依次递归直到找到那个单点然后再修改。这样就会有$\log_(N)$的复杂度去找单点。</p>
<h3 id="zkw线段树的单点修改"><a href="#zkw线段树的单点修改" class="headerlink" title="zkw线段树的单点修改"></a>zkw线段树的单点修改</h3><p>非常简单，由于我们知道应该改的点在叶子节点的第几个，我们只需要把那个点改掉，然后从它的父亲开始向上更新信息：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里以将pos处增加v为例</span>
    pos <span class="token operator">+</span><span class="token operator">=</span> M<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>min <span class="token operator">=</span> tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>max <span class="token operator">=</span> tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>pos<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>pos<span class="token punctuation">;</span>pos<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">Maintain</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>是的，只有这么短，是不是很niubia?</p>
<h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><p>坑着</p>
<h2 id="区间求和"><a href="#区间求和" class="headerlink" title="区间求和"></a>区间求和</h2><h3 id="传统线段树的区间求和"><a href="#传统线段树的区间求和" class="headerlink" title="传统线段树的区间求和"></a>传统线段树的区间求和</h3><p>对于要求区间的端点分类讨论：</p>
<ul>
<li>查询区间在当前节点区间的左边</li>
<li>查询区间在当前节点区间的右边</li>
<li>查询区间在横跨当前节点与其兄弟节点<br>好麻烦啊….写起来也是很长很长长长长长长。<h3 id="zkw线段树的区间求和"><a href="#zkw线段树的区间求和" class="headerlink" title="zkw线段树的区间求和"></a>zkw线段树的区间求和</h3>zkw线段树还是那个直接的思想：查哪里就从哪里开始算。因此zkw线段树从叶子节点对应位置开始依次向父节点走进行计算。假设我们查询区间为[l,r]这里要注意一点：</li>
<li>如果当前tree[l]是左儿子，那么它的兄弟节点(右儿子)tree[l^1]一定在这个查询区间内</li>
<li>如果当前tree[r]是右儿子，那么它的兄弟节点(左儿子)tree[r^1]一定在这个查询区间内</li>
<li>当tree[l]与tree[r]是兄弟节点时(l^r == 1 因为只有最后一位不同)，计算结束，防止重叠统计<br>因此实际上zkw线段树区间求和是求的(l,r)<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">querySum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span>cnt<span class="token operator">+</span>l<span class="token number">-1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>cnt<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">^</span>r<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里由于要计算[l,r]而不是(l,r)故l=cnt+l-1，r同理</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">~</span>l<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>l<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>l<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
是不是，很！niubi！</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[圆形LaTeX脚注的样式]]></title>
      <url>/2017/03/27/%E5%9C%86%E5%BD%A2LaTeX%E8%84%9A%E6%B3%A8%E7%9A%84%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>LaTeX自带脚注的样式只有一个数字在文字右上角，看起来很奇怪….因此我们需要改成常用的圆形脚注的样式<br><a id="more"></a><br>脚注的修改很简单….只需要几行就可以做到了:</p>
<pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">booktabs</span><span class="token punctuation">}</span>
<span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">float</span><span class="token punctuation">}</span> 
<span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">graphicx</span><span class="token punctuation">}</span>
<span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">geometry</span><span class="token punctuation">}</span>
<span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">pifont</span><span class="token punctuation">}</span>
<span class="token function selector">\usepackage</span><span class="token punctuation">[</span>perpage,symbol*<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">footmisc</span><span class="token punctuation">}</span>
<span class="token function selector">\DefineFNsymbols</span><span class="token punctuation">{</span>circled<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>192<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>193<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>194<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>195<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>196<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>197<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>198<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>199<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>200<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\ding</span><span class="token punctuation">{</span>201<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token function selector">\setfnsymbol</span><span class="token punctuation">{</span>circled<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下:<br><img src="/2017/03/27/圆形LaTeX脚注的样式/sample.png" alt="效果"></p>
]]></content>
      
        <categories>
            
            <category> LaTeX </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android WebView添加http头]]></title>
      <url>/2017/02/27/Android-WebView%E6%B7%BB%E5%8A%A0http%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p>有时我们需要在loadUrl的时候传输一些http头，在<strong>十一活动</strong>的开发中，webview中需要传输一个带有Mobile-Avoid-Nav:True的http头来屏蔽显示导航栏。如何实现呢？</p>
<a id="more"></a>
<p>事实上在Android开发中，webview添加http头进行传输是十分方便的。首先创建一个Map\<string,string\>存储键和值：</string,string\></p>
<pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> mExtraHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mExtraHeader<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Mobie-Avoid-Nav"</span><span class="token punctuation">,</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在webview的loadUrl方法中，有一个重载是支持添加httpHeader的：</p>
<p>假设有一个已经初始化并配置好的WebView对象，mWebView</p>
<pre class="line-numbers language-java"><code class="language-java">mWebView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> mExtraHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即可实现webview添加http的header项</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[BNDSOJ Monthly Round #1 Solution]]></title>
      <url>/2017/02/27/BNDSOJ-Monthly-Round-1-Solution/</url>
      <content type="html"><![CDATA[<h3 id="Robots"><a href="#Robots" class="headerlink" title="Robots"></a>Robots</h3><h4 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h4><p>暴力做法：枚举每个位置是否能走出去，复杂度$O(N^2)$</p>
<p>期望得分：10-30分</p>
<h4 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h4><p>根据题意，你只需要从左边找到第一个不是’&lt;’的，然后从右边找到不是’&gt;’的，减去这个区间的个数就行了。复杂度$O(N)$</p>
<hr>
<h3 id="Yulemiao"><a href="#Yulemiao" class="headerlink" title="Yulemiao"></a>Yulemiao</h3><h4 id="算法一："><a href="#算法一：" class="headerlink" title="算法一："></a>算法一：</h4><p>暴力模拟各个命令，复杂度$O(M \times Q)$。</p>
<p>期望得分：30-40分</p>
<h4 id="算法二："><a href="#算法二：" class="headerlink" title="算法二："></a>算法二：</h4><p>通过观察，我们可以发现整个命令是循环执行的。因此我们首先构造一个$(N+1) \times (N+1)$的单位矩阵$A$，令其第0行为每只yulemiao手中小鱼干的个数，$A_{x,i}$为第$i$只的yulemiao对应的命令（事实上交换是我们需要关注的操作）。当遇到命令1时，$A_{0,x}$+=1;遇到命令2时，将$A_{x,i}$全部设置为0;遇到命令3，将$A_{x,i}$与$A_{y,i}$交换。之后计算$A^M$进行矩阵快速幂，最后输出$A_0$即可。复杂度$O(log_{2}{M}+Q \times N)$。<br>P.S.:注意优化稀疏矩阵的乘法运算<br>期望得分：100分</p>
<p>对于命令3的证明：由于$A_{x,i}$对应的为第$x$只yulemiao所对应的所有操作，因此交换前的所有命令相当于让第$y$只执行，因此将$A_{x,i}$与$A_{y,i}$具有正确性。</p>
<hr>
<h3 id="Yulemiao的yulemao做法"><a href="#Yulemiao的yulemao做法" class="headerlink" title="Yulemiao的yulemao做法"></a>Yulemiao的yulemao做法</h3><p>注意到题目中有交换，所以一轮过后每个元素都可以和它的下标相连，组成一个个联通块儿，每个块儿的周期为一次变动后变动的元素的个数，可以一次模拟后用并查集来处理</p>
<p>因为有清零的操作且最初都是零，所以我们需要模拟两个周期来得到第一个周期结束后各个点的值和第二个周期结束后各个点的值，相减后得到增长</p>
<p>之后就简单了，后面的整周期的增长直接用乘法就可以出来了，余出来的几个周期模拟就可以了</p>
<p>如果想整体跑的话这样周期就变成了所有循环节的公倍数</p>
<p>但是注意到不在一个连通块中的元素互不影响，所以可以每个连通块分开跑在合并成最终答案</p>
<p><del>虽然这题数据很小用整体跑也不会超时</del></p>
<p>时间复杂度： $O(n \times q)$ ，期望得分：100</p>
<p>有人觉得我这个算法有问题，整体一块儿跑的代码链接<a href="http://bnds.tech/submission/959" target="_blank" rel="external">点击这里</a>，可以试下hack一下（超时比较好构造，构造WA）UPD：大师兄手快已经tle了……</p>
<p>UPD2：分开跑的<a href="http://bnds.tech/submission/975" target="_blank" rel="external">点击这里</a></p>
<hr>
<h3 id="Math-Problem"><a href="#Math-Problem" class="headerlink" title="Math Problem"></a>Math Problem</h3><p>这道题的意思是一个长度为 $n$ 的数列，用1到 $m$ 去填，使得整个数列不下降</p>
<h4 id="算法一-1"><a href="#算法一-1" class="headerlink" title="算法一"></a>算法一</h4><p>暴力枚举，这个不用多说了吧</p>
<p>时间复杂度 $O(n!)$ ，期望得分：30分</p>
<h4 id="算法二-1"><a href="#算法二-1" class="headerlink" title="算法二"></a>算法二</h4><p>注意到影响第i个数是什么的其实只有它前面那个数只要不小于它就可以，所以可做递推式： $f(i, j) = \sum_{k=1}^j \ f(i - 1, k)$ ， 其中 $i$ 是集合A的第 $i$ 个数，$j$ 代表填 $j$ ， $f(i, j)$ 表示此时所得到的方案数</p>
<p>时间复杂度 $O(n \times m ^ 2)$ ，期望得分：50分</p>
<h4 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h4><p>在算法二的基础上，我们注意到可以用前缀合来维护 $\sum_{k=1} ^ j \ f(i - 1, k)$ ，这样可以优化掉复杂度的一个 $m$</p>
<p>时间复杂度 $O(n \times m)$ ，期望得分：70分</p>
<h4 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h4><p>在算法三的基础上，可以发现其实 $f$ 可以被优化掉只留下前缀和 $sum(i, j) = sum(i - 1, j) + sum(i, j - 1)$ ，非常神奇的，你发现你绕了一大圈仅仅是打了个一个方格图从左上角到右下角的路径条数的DP</p>
<p>注意到给的模数是 $10 ^ 9 + 7$ 是个质数，又因为 $n$ 和 $m$ 都比模数要小，所以可用逆元求取组合数，所以复杂度为 $O(n)$</p>
<p>时间复杂度： $O(n + \log_{2}{p})$，期望得分：100分</p>
<h4 id="算法五"><a href="#算法五" class="headerlink" title="算法五"></a>算法五</h4><p>其实上面说的那堆只是如果你没思路的话可以考虑的方向。如果你的数学直观够好的话，其实你能发现这题可以用插板法秒掉，相当于将A中的元素依次放到 $m$ 个已排好序的盒子里，可得到 $C_{n + m - 1} ^ {m - 1}$，依旧用逆元求取组合数解决</p>
<p>时间复杂度： $O(n + \log_{2}{p})$，期望得分：100分</p>
<hr>
<h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h3><p>这道题的意思是求从起点到终点的最大不共边路径条数。</p>
<p>于是这题可以转化为每条边的流量是1的无向图最大流问题</p>
<p>用Dinic或其它方法求解都可以，注意图是无向图把回边的流量也建成1即可</p>
<p>时间复杂度：$O(n \times m ^ 2)$ ，但通常情况下网络流不会跑满这个时间复杂度，期望得分：100分</p>
<hr>
<h3 id="Std"><a href="#Std" class="headerlink" title="Std"></a>Std</h3><ol>
<li><p><a href="/assert/2017/src/bmr/1/Robots.cpp">Robots</a></p>
</li>
<li><p><a href="/assert/2017/src/bmr/1/Yulemiao.cpp">Yulemiao</a></p>
<p>2.1 <a href="/assert/2017/src/bmr/1/Yulemiao-1.cpp">Yulemiao By Yulemao</a></p>
</li>
<li><p><a href="/assert/2017/src/bmr/1/Math.cpp">Math Problem</a></p>
</li>
<li><p><a href="/assert/2017/src/bmr/1/Bridge1.cpp">Bridge</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> BNDSOJ Monthly Round </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> Learning in BNDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后缀数组详解]]></title>
      <url>/2017/02/05/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>后缀数组在解决字符串问题中十分高效且容易实现。那么它的原理是什么呢？</p>
<a id="more"></a>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><pre><code>后缀数组实质上是对一个字符串进行排序，通过RMQ的方法进行预处理之后可以在O(1)的时间内求出两个后缀的最长公共前缀(LCP)。后缀数组是后缀树的一个优化版本，与后缀树比较，后缀数组编码复杂度与空间消耗大大减少，因此它是一个十分值得掌握的算法。
</code></pre><h3 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h3><pre><code>S: 一个字符串
Suffix[i]: 以第i位开头S的后缀
SA[i]: 排名为i的后缀开头的位置;
Rank[i]: 以第i为开头的后缀的排名;
Height[i]: Suffix[SA[i]] 与 Suffix[SA[i-1]]的最长公共前缀的长度
H[i]: 排名为Rank[i]与排名$Rank[i]-1$的后缀的最长公共前缀
</code></pre><p>不难看出，$SA[i]$与$Rank[i]$是互逆运算。因此满足$Suffix[SA[i]]$ &lt; $Suffix[SA[i+1]]$ … &lt; $Suffix[SA[N]]$。</p>
<p>啊，从CSDN摘了个图(博主貌似从辣鸡百度百科搞的…)，大家自己yy一下….</p>
<p><img src="http://img.blog.csdn.net/20160205125505545" alt="SuffixArray"></p>
<p>后缀数组指的就是$SA[i]$这个数组。有了这个数组我们就可以搞很多大新闻(比如可以快速求出$Rank[i]$)。</p>
<h3 id="求出后缀数组SA-i"><a href="#求出后缀数组SA-i" class="headerlink" title="求出后缀数组SA[i]"></a>求出后缀数组SA[i]</h3><p>由于本人比较弱，因此这里只讲如何用倍增(Doubling)算法求出SA[i]。由于直接求Rank[i]是有困难的，因此我们通过枚举长度$2^k$，即枚举每个字符开始$2^k$长度的字符串的排名求出每一回合的rank[i]。通过观察我们会发现，rank[i]事实上可以从rank[i-1]推过来。这是因为每一次倍增都相当于字符串拼接。举个例子，在进行第k轮运算的时候，新的字符串事实上是从substr(i,$2^{k-1}$)与substr($2^k-1+i,2^{k-1}$)拼接而成。由于substr($i,2^{k-1}$)这个字符串在上一回合已经遇到过了，因此rank[k]是可以直接使用的。将两个子串的rank合并为一个，pair然后做双关键字排序即可。</p>
<p>(我又从CSDN | 百度百科搞来一张图…大家可以看一下参考参考)</p>
<p><img src="http://img.blog.csdn.net/20160205125603928" alt="Solving Rank"></p>
<p>这里双关键字排序，为了效率以及方便起见，我们使用基数排序(Radix Sort)。基数排序就是按照数字每位上的数，从低位到高位依次排序（不足的位置用0补齐）。时间复杂度是O(len*N)即与数字长度有关系。</p>
<p>我们知道Rank[i]与SA[i]是互逆运算，因此我们可以在$O(strlen(str))$的时间内得到SA[i]，即后缀数组。</p>
<h3 id="求Height数组"><a href="#求Height数组" class="headerlink" title="求Height数组"></a>求Height数组</h3><p>为了解决更加复杂的问题，我们需要引入Height[i]数组，即Suffix[i]与Suffix[i-1]的最长公共前缀。同时需要一个数组H[i]，意义如上文所述。</p>
<p><img src="http://img.blog.csdn.net/20160205125636006" alt="Solving Height"></p>
<p>这里我们不需要对SA[i]一一对比进行求解，我们发现H[i]有一个神奇的性质：H[i] ≥ H[i-1]-1。满足这样的关系，我们的算法复杂度就只有O(N)了。由于本蒟蒻不会证明…这里引用一下网上的证明方法:</p>
<blockquote>
<p>设<strong>Suffix[k]</strong>是排在<strong>Suffix[i - 1]</strong>前一名的后缀，则它们的最长公共前缀是<strong>H[i - 1]</strong>。都<strong>去掉第一个字符</strong>，就变成<strong>Suffix[k + 1]</strong>和<strong>Suffix[i]</strong>。<strong>如果H[i - 1] = 0或1</strong>,那么<strong>H[i] ≥ 0</strong>显然成立。<strong>否则</strong>，<strong>H[i] = H[i - 1] - 1(去掉了原来的第一个,其他前缀一样相等)</strong>，所以<strong>Suffix[i]</strong>和在它前一名的后缀的最长公共前缀<strong>至少是H[i - 1] - 1。</strong> </p>
</blockquote>
<h3 id="后缀数组模板"><a href="#后缀数组模板" class="headerlink" title="后缀数组模板"></a>后缀数组模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> For(i,l,r) for(int i=l; i&lt;=r; ++i)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> rFor(i,l,r) for(int i=l; i>=r; --i)</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200200</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>rk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ht<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">getSA</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token operator">=</span>rk<span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token operator">=</span>ht<span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">++</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> k<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> y<span class="token punctuation">[</span><span class="token operator">++</span>p<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span> y<span class="token punctuation">[</span><span class="token operator">++</span>p<span class="token punctuation">]</span><span class="token operator">=</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">;</span>
        <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">++</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">rFor</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> sa<span class="token punctuation">[</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>
            x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span>p<span class="token operator">:</span><span class="token operator">++</span>p<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">=</span>p<span class="token punctuation">)</span><span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p<span class="token operator">?</span><span class="token operator">--</span>p<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>p<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>p<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ht<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getSA</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getHeight</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">For</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
            <category> String-Processing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.3 Barn Repair]]></title>
      <url>/2017/01/14/USACOSection1-3-Barn-Repair/</url>
      <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个区间[1,S]上的C个点，问用M根线段覆盖这些点最短长度是多少。</p>
<p>中文的<a href="https://www.luogu.org/problem/show?pid=1209" target="_blank" rel="external">题目链接</a>(来自洛谷，题目来自NOCOW)</p>
<hr>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>为什么这次不贴输入输出什么的了呢？因为终于遇到了一个需要想一想的题。从抽象模型不难看出，这题可以贪心。但是还有更好的解法，那就是DP。令dp[i][j]表示用第i个木板覆盖第j个点所需最短长度。因此可以得到转移方程：dp[i][j] = min(dp[i-1][j-1]+1,dp[i][j-1]+a[j]-a[j-1])。前提是a[]数组在dp前要按照升序排好序。dp[i-1][j-1]+1表示使用一根新的，长度为1的木板覆盖；dp[i][j-1]+a[j]-a[j-1]表示将第i根延长到下一个点所需长度。因此可以通过O(M*C)的算法dp过此题。</p>
<hr>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
ID: ccodera1
LANG: C++
TASK: barn1
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> M<span class="token punctuation">,</span>C<span class="token punctuation">,</span>S<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">filein</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"barn1.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"barn1.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">filein</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>M<span class="token operator">>></span>S<span class="token operator">>></span>C<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0x3f3f3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0x33f3f3f</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>C<span class="token punctuation">)</span><span class="token punctuation">{</span>
                ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.3 Mixing Milk]]></title>
      <url>/2017/01/14/USACOSection1-3-Mixing-Milk/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>由于乳制品产业利润很低，所以降低原材料（牛奶）价格就变得十分重要。帮助Marry乳业找到最优的牛奶采购方案。</p>
<p>Marry乳业从一些奶农手中采购牛奶，并且每一位奶农为乳制品加工企业提供的价格是不同的。此外，就像每头奶牛每天只能挤出固定数量的奶，每位奶农每天能提供的牛奶数量是一定的。每天Marry乳业可以从奶农手中采购到小于或者等于奶农最大产量的整数数量的牛奶。</p>
<p>给出Marry乳业每天对牛奶的需求量，还有每位奶农提供的牛奶单价和产量。计算采购足够数量的牛奶所需的最小花费。</p>
<p>注：每天所有奶农的总产量大于Marry乳业的需求量。</p>
<hr>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：</p>
<p>第 1 行共二个数值:N,(0&lt;=N&lt;=2,000,000)是需要牛奶的总数；M,(0&lt;= M&lt;=5,000)是提供牛奶的农民个数。</p>
<p>第 2 到 M+1 行:每行二个整数:Pi 和 Ai。</p>
<p>Pi(0&lt;= Pi&lt;=1,000) 是农民 i 的牛奶的单价。</p>
<p>Ai(0 &lt;= Ai &lt;= 2,000,000)是农民 i 一天能卖给Marry的牛奶制造公司的牛奶数量。</p>
<p>输出格式：</p>
<p>单独的一行包含单独的一个整数，表示Marry的牛奶制造公司拿到所需的牛奶所要的最小费用。</p>
<hr>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入样例#1：</strong></p>
<pre>
100 5
5 20
9 40
3 10
8 80
6 30
</pre>

<p><strong>输出样例#1：</strong></p>
<pre>
630
</pre>

<hr>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>贪心贪心贪心。这题猛着贪心就可以。也就是先按照价格升序排列，然后一直买买买，买到够为止。</p>
<hr>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
ID: ccodera1
LANG: C++
TASK: milk
*/</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">5001</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> P<span class="token punctuation">{</span>
  <span class="token keyword">int</span> value<span class="token punctuation">;</span>
  <span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>P <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>P <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span>value<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"milk.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"milk.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  P li<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
  cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cin<span class="token operator">>></span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">>></span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>li<span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
      n<span class="token operator">-</span><span class="token operator">=</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
      ans<span class="token operator">+</span><span class="token operator">=</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">*</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      ans<span class="token operator">+</span><span class="token operator">=</span>n<span class="token operator">*</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.2 Dual Palindromes]]></title>
      <url>/2017/01/14/USACOSection1-2-Dual-Palindromes/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果一个数从左往右读和从右往左读都是一样，那么这个数就叫做“回文数”。例如，12321就是一个回文数，而77778就不是。当然，回文数的首和尾都应是非零的，因此0220就不是回文数。</p>
<p>事实上，有一些数（如21），在十进制时不是回文数，但在其它进制（如二进制时为10101）时就是回文数。</p>
<p>编一个程序，从文件读入两个十进制数N (1 &lt;= N &lt;= 15)S (0 &lt; S &lt; 10000)然后找出前N个满足大于S且在两种或两种以上进制（二进制至十进制）上是回文数的十进制数，输出到文件上。</p>
<p>本问题的解决方案不需要使用大于32位的整型</p>
<hr>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p><strong>输入格式：</strong><br>只有一行，用空格隔开的两个数N和S。</p>
<p><strong>输出格式：</strong><br>N行, 每行一个满足上述要求的数，并按从小到大的顺序输出。</p>
<hr>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>输入样例#1：</strong></p>
<pre>
3 25
</pre>

<p><strong>输出样例#1：</strong></p>
<p><pre><br>26<br>27<br>28</pre></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>同上一题一样，这个也是个大大大大暴力(USACO前面的暴力超级多)。就是枚举区间内所有数字，然后从二进制转移至转到九进制看看有几个可以，发现有两个可以之后直接输出。总之xjb暴力就行了。</p>
<hr>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
ID: ccodera1
LANG: C++
TASK: dualpal
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>s<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">tf</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        len<span class="token operator">++</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">%</span>b<span class="token punctuation">;</span>k<span class="token operator">=</span>k<span class="token operator">/</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>a<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"dualpal.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"dualpal.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                p<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Mathematics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Brute Force </tag>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.2 Palindromic Squares]]></title>
      <url>/2017/01/14/USACOSection1-2-Palindromic-Squares/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="http://train.usaco.org/usacoprob2?a=ACpuSoxNmSV&amp;S=palsquare" target="_blank" rel="external">原题链接</a>,English Version, Login required.</p>
<p>回文数是指从左向右念和从右向左念都一样的数。如12321就是一个典型的回文数。</p>
<p>给定一个进制B(2&lt;=B&lt;=20,由十进制表示)，输出所有的大于等于1小于等于300（十进制下）且它的平方用B进制表示时是回文数的数。用’A’,’B’……表示10，11等等</p>
<hr>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>共一行，一个单独的整数B(B用十进制表示)。<br>每行两个B进制的符合要求的数字，第二个数是第一个数的平方，且第二个数是回文数。</p>
<h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>每行两个B进制的符合要求的数字，第二个数是第一个数的平方，且第二个数是回文数。</p>
<hr>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>输入样例#1：</strong></p>
<pre>
10
</pre>

<p><strong>输出样例#1：</strong></p>
<pre>
1 1
2 4
3 9
11 121
22 484
26 676
101 10201
111 12321
121 14641
202 40804
212 44944
264 69696
</pre>

<hr>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>事实上我们发现这题数据范围贼小。所以可以说这是个模拟题…直接枚举所有数字然后转换为二进制判断合法性。</p>
<hr>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
ID: ccodera1
LANG: C++
TASK: palsquare
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> B<span class="token punctuation">;</span>
<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stub<span class="token punctuation">[</span><span class="token number">10100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token string">'K'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        a<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token punctuation">[</span>x<span class="token operator">%</span>B<span class="token punctuation">]</span><span class="token punctuation">;</span>
        x<span class="token operator">/</span><span class="token operator">=</span>B<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    len<span class="token operator">=</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cur<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>cur<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>a<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"palsquare.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"palsquare.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>B<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">300</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">*</span>i<span class="token punctuation">;</span>
        <span class="token function">parse</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">parse</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">parse</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Mathematics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Brute Force </tag>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCodeOJ-1 Two Sum]]></title>
      <url>/2017/01/10/LeetCodeOJ-1-Two-Sum/</url>
      <content type="html"><![CDATA[<p>LeetCode OJ Problem - 1<br>Difficulty: Easy</p>
<a id="more"></a>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p> <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">Two Sum</a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code>Directly loop across the array(vector)
</code></pre><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><p>Language: C++</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Language: Java</p>
<pre><code>public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        for(int i=0;i&lt;nums.length;++i){
            for(int j=i+1;j&lt;nums.length;++j){
                if(nums[i] + nums[j] == target){
                    ans[0] = i;
                    ans[1] = j;
                    return ans;
                } 
            }
        }
        return ans;
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.2 Name That Number]]></title>
      <url>/2016/12/23/USACOSection1-2-Name-That-Number/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> DFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.2 Transformations]]></title>
      <url>/2016/12/23/USACOSection1-2-Transformations/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一块N x N（1&lt;=N&lt;=10）正方形的黑白瓦片的图案要被转换成新的正方形图案。写一个程序来找出将原始图案按照以下列转换方法转换成新图案的最小方式：</p>
<p>1：转90度：图案按顺时针转90度。</p>
<p>2：转180度：图案按顺时针转180度。</p>
<p>3：转270度：图案按顺时针转270度。</p>
<p>4：反射：图案在水平方向翻转（以中央铅垂线为中心形成原图案的镜像）。</p>
<p>5：组合：图案在水平方向翻转，然后再按照1到3之间的一种再次转换。</p>
<p>6：不改变：原图案不改变。</p>
<p>7：无效转换：无法用以上方法得到新图案。</p>
<p>如果有多种可用的转换方法，请选择序号最小的那个。</p>
<p>只使用1–7中的一个步骤来完成这次转换。</p>
<hr>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：</p>
<p>第一行： 单独的一个整数N。</p>
<p>第二行到第N+1行： N行每行N个字符（不是“@”就是“-”）；这是转换前的正方形。</p>
<p>第N+2行到第2*N+1行： N行每行N个字符（不是“@”就是“-”）；这是转换后的正方形。</p>
<p>输出格式：</p>
<p>单独的一行包括1到7之间的一个数字（在上文已描述）表明需要将转换前的正方形变为转换后的正方形的转换方法。</p>
<hr>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入样例#1：</strong><br>3<br>@-@<br>-–<br>@@-<br>@-@<br>@–<br>–@</p>
<p><strong>输出样例#1：</strong><br>1</p>
<hr>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题就是个毒瘤模拟….超级麻烦，慢慢做就行。</p>
<hr>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> N<span class="token punctuation">;</span>
string str<span class="token punctuation">,</span>end<span class="token punctuation">;</span>
<span class="token keyword">inline</span> string <span class="token function">r90</span><span class="token punctuation">(</span>string rect<span class="token punctuation">)</span><span class="token punctuation">{</span>
    string ret <span class="token operator">=</span> rect<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span>j<span class="token operator">*</span>N<span class="token operator">+</span>N<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rect <span class="token punctuation">[</span>i<span class="token operator">*</span>N<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">inline</span> string <span class="token function">r180</span><span class="token punctuation">(</span>string rect<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">r90</span><span class="token punctuation">(</span><span class="token function">r90</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">inline</span> string <span class="token function">r270</span><span class="token punctuation">(</span>string rect<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">r90</span><span class="token punctuation">(</span><span class="token function">r90</span><span class="token punctuation">(</span><span class="token function">r90</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
string <span class="token function">fz</span> <span class="token punctuation">(</span>string rect<span class="token punctuation">)</span><span class="token punctuation">{</span>
    string ret <span class="token operator">=</span> rect<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span>i<span class="token operator">*</span>N<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rect <span class="token punctuation">[</span>i<span class="token operator">*</span>N<span class="token operator">+</span><span class="token punctuation">(</span>N<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"transform.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"transform.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span>N<span class="token punctuation">;</span>
    string tmp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin <span class="token operator">>></span>tmp<span class="token punctuation">;</span>
        str <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin <span class="token operator">>></span>tmp<span class="token punctuation">;</span>
        end <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">r90</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">r180</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">r270</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">fz</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">r90</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> end <span class="token operator">||</span> <span class="token function">r180</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> end <span class="token operator">||</span> <span class="token function">r270</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.2 Milking Cows]]></title>
      <url>/2016/12/23/USACOSection1-2-Milking-Cows/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>三个农民每天清晨5点起床，然后去牛棚给3头牛挤奶。第一个农民在300秒(从5点开始计时)给他的牛挤奶，一直到1000秒。第二个农民在700秒开始，在 1200秒结束。第三个农民在1500秒开始2100秒结束。期间最长的至少有一个农民在挤奶的连续时间为900秒(从300秒到1200秒)，而最长的无人挤奶的连续时间(从挤奶开始一直到挤奶结束)为300秒(从1200秒到1500秒)。</p>
<p>你的任务是编一个程序，读入一个有N个农民(1 &lt;= N &lt;= 5000)挤N头牛的工作时间列表，计算以下两点(均以秒为单位):</p>
<p>最长至少有一人在挤奶的时间段。</p>
<p>最长的无人挤奶的时间段。（从有人挤奶开始算起）</p>
<hr>
<h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><p>输入格式：</p>
<p>Line 1:</p>
<p>一个整数N。</p>
<p>Lines 2..N+1:</p>
<p>每行两个小于1000000的非负整数，表示一个农民的开始时刻与结束时刻。</p>
<p>输出格式：</p>
<p>一行，两个整数，即题目所要求的两个答案。</p>
<hr>
<h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入样例#1：</strong><br>3<br>300 1000<br>700 1200<br>1500 2100</p>
<p><strong>输出样例#1：</strong><br>900 300</p>
<hr>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>此题是区间类模拟题，有一定思维含量。事实上我们只需要按区间左端点排序之后，逐一遍历，判断后一个区间是包含于前一个区间还是新开的区间，每次判断的时候更新最大值。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> P<span class="token punctuation">{</span>
    <span class="token keyword">int</span> s<span class="token punctuation">,</span>e<span class="token punctuation">;</span>
    <span class="token function">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">P</span><span class="token punctuation">(</span><span class="token keyword">int</span> ss<span class="token punctuation">,</span><span class="token keyword">int</span> ee<span class="token punctuation">)</span><span class="token punctuation">{</span>
        s<span class="token operator">=</span>ss<span class="token punctuation">;</span>
        e<span class="token operator">=</span>ee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>P<span class="token operator">></span> v<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>P a<span class="token punctuation">,</span>P b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>s<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"milk2.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"milk2.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>cin<span class="token operator">>></span>N<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> s<span class="token punctuation">,</span>e<span class="token punctuation">;</span>cin<span class="token operator">>></span>s<span class="token operator">>></span>e<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ss <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ee <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans1 <span class="token operator">=</span> ee<span class="token operator">-</span>ss<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token operator">&lt;=</span>ee<span class="token punctuation">)</span><span class="token punctuation">{</span>
            ee<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">,</span>ee<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            ans1<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans1<span class="token punctuation">,</span>ee<span class="token operator">-</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ans2<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans2<span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token operator">-</span>ee<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ss<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>
            ee<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans2<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.1 Broken Necklace]]></title>
      <url>/2016/12/23/USACOSection1-1-Broken-Necklace/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>你有一条由N个红色的，白色的，或蓝色的珠子组成的项链(3&lt;=N&lt;=350)，珠子是随意安排的。 这里是 n=29 的二个例子:</p>
<p><img src="https://cdn.luogu.org/upload/pic/56.png" alt="img"></p>
<p>第一和第二个珠子在图片中已经被作记号。</p>
<p>图片 A 中的项链可以用下面的字符串表示：</p>
<p>brbrrrbbbrrrrrbrrbbrbbbbrrrrb</p>
<p>假如你要在一些点打破项链,展开成一条直线，然后从一端开始收集同颜色的珠子直到你遇到一个不同的颜色珠子，在另一端做同样的事(颜色可能与在这之前收集的不同)。 确定应该在哪里打破项链来收集到最大数目的珠子。</p>
<p>例如，在图片 A 中的项链中，在珠子 9 和珠子 10 或珠子 24 和珠子 25 之间打断项链可以收集到8个珠子。</p>
<p>白色珠子什么意思?</p>
<p>在一些项链中还包括白色的珠子(如图片B) 所示。</p>
<p>当收集珠子的时候，一个被遇到的白色珠子可以被当做红色也可以被当做蓝色。</p>
<p>表现含有白珠项链的字符串将会包括三个符号 r ， b 和 w 。</p>
<p>写一个程序来确定从一条被给出的项链可以收集到的珠子最大数目。</p>
<h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><p>输入格式：</p>
<p>第 1 行: N, 珠子的数目</p>
<p>第 2 行: 一串长度为N的字符串, 每个字符是 r ， b 或 w。</p>
<p>输出格式：</p>
<h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入样例#1：</strong><br>29<br>wwwbbrwrbrbrrbrbrwrwwrbwrwrrb</p>
<p><strong>输出样例#1：</strong><br><code>11</code></p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>由于N很小，我们可以暴力枚举从哪个位置断开，最后取最大值即可。值得注意的是，项链是个环状结构，因此我们可以通过复制一遍输入的数组接到它后面破环成链。</p>
<p>当然我们不能无脑地做题，这题事实上可进行记忆化递推。设两个数组left[N*2][0/1]和right[N*2][0/1]表示从左边拿能收集到的蓝色/红色的珠子个数和从右边拿能收集到蓝色/红色的个数。因此最后我们只需要找到四个值配对后相加的最大值即可。</p>
<h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  right<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
      right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans<span class="token operator">></span>n<span class="token operator">?</span>n<span class="token operator">:</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Brute Force </tag>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.1 Friday the Thirteenth]]></title>
      <url>/2016/12/23/USACOSection1-1-Friday-the-Thirteenth/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>13号又是一个星期五。13号在星期五比在其他日子少吗?为了回答这个问题,写一个程序，要求计算每个月的十三号落在周一到周日的次数。给出N年的一个周期，要求计算1900年1月1日至1900+N-1年12月31日中十三号落在周一到周日的次数，N为正整数且不大于400.</p>
<p>这里有一些你要知道的:</p>
<p>1、1900年1月1日是星期一.</p>
<p>2、4,6,11和9月有30天.其他月份除了2月都有31天.闰年2月有29天,平年2月有28天.</p>
<p>3、年份可以被4整除的为闰年(1992=4*498 所以 1992年是闰年,但是1990年不是闰年).</p>
<p>4、以上规则不适合于世纪年。可以被400整除的世纪年为闰年,否则为平年。所以,1700,1800,1900和2100年是平年,而2000年是闰年.</p>
<p>请不要调用现成的函数</p>
<p>请不要预先算好数据（就是叫不准打表）!</p>
<h4 id="输入与输出格式"><a href="#输入与输出格式" class="headerlink" title="输入与输出格式"></a>输入与输出格式</h4><p>输入格式：</p>
<p>一个正整数n.</p>
<p>输出格式：</p>
<p>输入输出样例</p>
<p><strong>输入样例#1：</strong></p>
<pre><code>20
</code></pre><p><strong>输出样例#1：</strong><br><code>36 33 34 33 35 35 34</code></p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>由于N很小，我们可以暴力枚举每一天。定义一个结构体处理日期的部分，然后一天一天处理，详细实现见代码。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
ll M<span class="token punctuation">;</span>
<span class="token keyword">int</span> N<span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">isLeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> y<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getDays</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">bool</span> isleap<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> isleap<span class="token operator">?</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">!=</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">!=</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">!=</span><span class="token number">7</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">!=</span><span class="token number">8</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">!=</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">!=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">NextDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span><span class="token number">7</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> Date<span class="token punctuation">{</span>
    <span class="token keyword">int</span> y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> leap<span class="token punctuation">;</span>
    <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">int</span> cntY<span class="token punctuation">;</span>
    <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> yy<span class="token punctuation">,</span><span class="token keyword">int</span> mm<span class="token punctuation">,</span><span class="token keyword">int</span> dd<span class="token punctuation">)</span><span class="token punctuation">{</span>
        y <span class="token operator">=</span> yy<span class="token punctuation">;</span>
        m <span class="token operator">=</span> mm<span class="token punctuation">;</span>
        d <span class="token operator">=</span> dd<span class="token punctuation">;</span>
        cntY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        leap <span class="token operator">=</span> <span class="token function">isLeap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">NextYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">++</span>y<span class="token punctuation">;</span>
        <span class="token operator">++</span>cntY<span class="token punctuation">;</span>
        leap <span class="token operator">=</span> <span class="token function">isLeap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">NextMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        m<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">NextYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">NextDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">++</span>d<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">></span><span class="token function">getDays</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>leap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">NextMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"friday.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"friday.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Date d <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>cin<span class="token operator">>></span>N<span class="token punctuation">;</span>
    <span class="token keyword">int</span> dt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>cntY <span class="token operator">&lt;=</span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>d <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>
            cnt<span class="token punctuation">[</span>dt<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        dt <span class="token operator">=</span> <span class="token function">NextDate</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        d<span class="token punctuation">.</span><span class="token function">NextDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Brute Force </tag>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.1 Greedy Gift Givers]]></title>
      <url>/2016/12/23/USACOSection1-1-Greedy-Gift-Givers/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一群（NP个）要互送礼物的朋友，GY要确定每个人送出的钱比收到的多多少。在这一个问题中，每个人都准备了一些钱来送礼物，而这些钱将会被平均分给那些将收到他的礼物的人。然而，在任何一群朋友中，有些人将送出较多的礼物(可能是因为有较多的朋友)，有些人有准备了较多的钱。给出一群朋友，没有人的名字会长于 14 字符，给出每个人将花在送礼上的钱，和将收到他的礼物的人的列表，请确定每个人收到的比送出的钱多的数目。</p>
<p><strong>输入输出格式</strong></p>
<p>输入格式：</p>
<p>第 1 行: 人数NP,2&lt;= NP&lt;=10</p>
<p>第 2 行 到 第NP+1 行:这NP个在组里人的名字一个名字一行</p>
<p>第NP＋2到最后：</p>
<p>第一行是将会送出礼物人的名字。</p>
<p>第二行包含二个数字:第一个是原有的钱的数目（在0到2000的范围里），第二个 NGi 是将收到这个人礼物的人的个数 如果 NGi 是非零的, 在下面 NGi 行列出礼物的接受者的名字，一个名字一行。</p>
<p><strong>样例输入输出</strong></p>
<p>输入：</p>
<p>5<br>dave<br>laura<br>owen<br>vick<br>amr<br>dave<br>200 3<br>laura<br>owen<br>vick<br>owen<br>500 1<br>dave<br>amr<br>150 2<br>vick<br>owen<br>laura<br>0 2<br>amr<br>vick<br>vick<br>0 0</p>
<p>输出：</p>
<p>dave 302<br>laura 66<br>owen -359<br>vick 141<br>amr -150</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>本题也是一个非常简单的模拟，为了练习STL的使用，这次用map和pair浪了一波。其中map\<string,pair\<int,int\>>存的分别是姓名，送出的钱和收到的钱。之后直接进行模拟即可。</string,pair\<int,int\></p>
<h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">filein</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"gift1.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"gift1.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">closefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> m<span class="token punctuation">;</span>
string names<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">filein</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        string name<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>name<span class="token punctuation">;</span>
        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mon<span class="token punctuation">,</span>pop<span class="token punctuation">;</span>
    string g<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>g<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>mon<span class="token operator">>></span>pop<span class="token punctuation">;</span>
        m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>first<span class="token operator">=</span>mon<span class="token punctuation">;</span>
        <span class="token keyword">int</span> every<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pop<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>second<span class="token operator">+</span><span class="token operator">=</span>mon<span class="token operator">%</span>pop<span class="token punctuation">;</span>
            every <span class="token operator">=</span> mon<span class="token operator">/</span>pop<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            every<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pop<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            string rec<span class="token punctuation">;</span>cin<span class="token operator">>></span>rec<span class="token punctuation">;</span>
            m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>second<span class="token operator">+</span><span class="token operator">=</span>every<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>second<span class="token operator">-</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">closefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACOSection1.1 Your Ride Is Here]]></title>
      <url>/2016/12/23/USACOSection1-1-Your-Ride-Is-Here/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>众所周知，在每一个彗星后都有一只UFO。这些UFO时常来收集地球上的忠诚支持者。不幸的是，他们的飞碟每次出行都只能带上一组支持者。因此，他们要用一种聪明的方案让这些小组提前知道谁会被彗星带走。他们为每个彗星起了一个名字，通过这些名字来决定这个小组是不是被带走的那个特定的小组（你认为是谁给这些彗星取的名字呢？）。关于如何搭配的细节会在下面告诉你；你的任务是写一个程序，通过小组名和彗星名来决定这个小组是否能被那颗彗星后面的UFO带走。</p>
<p>小组名和彗星名都以下列方式转换成一个数字：最终的数字就是名字中所有字母的积，其中“A”是1，“Z”是26。例如，“USACO”小组就是21*19*1*3*15=17955。如果小组的数字 mod 47等于彗星的数字mod 47,你就得告诉这个小组需要准备好被带走！（记住“a mod b”是a除以b的余数；34 mod 10等于4）</p>
<p>写出一个程序，读入彗星名和小组名并算出用上面的方案能否将两个名字搭配起来，如果能搭配，就输出“GO”，否则输出“STAY”。小组名和彗星名均是没有空格或标点的一串大写字母（不超过6个字母）。</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>纯粹的模拟题，在算之前把表打好（及每个字母对应的数值打在数组里），每次按照题目模拟即可。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> star<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> team<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    s<span class="token operator">*</span><span class="token operator">=</span>num<span class="token punctuation">[</span>star<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    t<span class="token operator">*</span><span class="token operator">=</span>num<span class="token punctuation">[</span>team<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">47</span><span class="token operator">==</span>s<span class="token operator">%</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"GO\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"STAY\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">filein</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"ride.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"ride.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">closefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">filein</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">closefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Journal Of My Participation Of ASDAN Business Contest]]></title>
      <url>/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/</url>
      <content type="html"><![CDATA[<h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>​    A day earlier, I arrived at the hotel that was nearby Beijing Royal School where I would have ASDAN Business Simulation Contest. I was asked by our “CEO” Mr.Shi to collect some data of the history of air quality index of Beijing, because of one the part of the contest was to work on an advertisement project, and the goods we sold was pollution mask!(Maybe because that was ASDAN Beijing…). So I just wrote a Python script to grab data from the database of Beijing Environmental Protection Administration… Excited!</p>
<h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>​    We met each other at the meeting hall of Beijing Royal School, and we listened to the advertisement of ASDAN for about an hour… Then we took the tutorial of ASDAN Business Simulation Contest. That was really helpful for me because I was totally a fresh man in this field… Actually, My position in our Compay was a data analyst. </p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/AD-1.jpg" alt="Advertisment of ASDAN"></p>
<p>​    After the tutorial, we had a Test Round, which was designed to help us to be familiar with the contest environment. During the test round, CEO Shi and I were working on writing a computer program that can automatically figure out the best proportion of different types of the imagined employee of our company, and we finally worked that out right before the end of the test round. And we could just input the total amount of our property, the amount of money that we wanted to get and other factor of our market(production cost, quality cost, sale cost etc.), then the program could give out the best decision which could be taken as a reference during the operation round.</p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/Entry.jpg" alt="Entry to office area"></p>
<p>​    The first round was really rush. Because after the operation round, we would have a presentaion of our first project: Advertising by giving speech. According to the rule of the contest, everyone in a company must to speak and give the presentation of the product. That was a little challenge for me since I was the only student who came from National Department of our school. But I wasn’t affraid of that because I had already been a “battlehardened” student on giving presentation and performance…(I’m the first chair of the second violin of our school orchestra, therefore I experienced lots of performing contest). Since we misunderstood the meaning of “Quality cost”, we didn’t submit the best decision to the first round operation… But we did very well during the presentation.(Though we lost 450,000 RMB after the first round.) I was assigned to explain the reason of pricing our product.</p>
<p>​    After the presentation, we quickly made the decision for the second round operation. We soon were notified that the third round operation was canceled due to the server error… Therefore we took a short break in the afternoon…</p>
<p>​    After supper was the most excited activity called “The Auction”. The rule was very funny. We would have a auction to buy “machines”(including wood machine, brick machine and metal machine) in order to obtain the permission to buy “ingredients”, which included “Wood”, “Brick” and “Metal”. </p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/Auction-0.jpg" alt="Auction Introduction"></p>
<p>The rule was that only companies who had machine could buy ingredients which corrsponded to it. Other companies could buy ingredients from companies who had machines.Four wood ingredients could be used to build a wood house, three bricks was required to build a brick house and two metal is required to build a metal house. And in order to be qualified to took part in the rating section, a company, at least, had to have one wood house, one brick house and one metal house.</p>
<p>​    It was CHAOS every where 23333</p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/Auction-1.jpg" alt="Auction Chaos"></p>
<p>​    The performance of our company was good, we got 4 wood ingreidents and 3 bricks. But we didn’t get any metal!! Therefore, it was a pity that we didn’t won the auction.</p>
<hr>
<h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>​    We checked our rank at the beginning. We were Rank 12. That meant that if we wanted to get into top 5, we needed to won 5,000,000 RMB or more… The opening was very good and we won 1,700,000. In the second round presentation, we did our best to fight for the bonus… However we failed QAQ. And in the last round operation, we only won 800,000 and the rand droped to Rank 17 TAT. It was a … “sorrowful” ending.</p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/Exit.jpg" alt="Ending"></p>
<hr>
<h3 id="Ending-Cereomony"><a href="#Ending-Cereomony" class="headerlink" title="Ending Cereomony"></a>Ending Cereomony</h3><p>​    <img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/SignWall.jpg" alt="Signs"></p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/BestProject.jpg" alt="Best Project Award"></p>
<p><img src="/2016/11/26/Journal-Of-My-Participation-Of-ASDAN-Business-Contest/Silver.jpg" alt="Silver Award"></p>
<hr>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>​    Though we just won “Enterprise Award”(For Top 50%), we learnt lots of knowledge to run a company. Something interesting is that all of participants in our company hadn’t taken part in any forms of business contest… It was very valuable;    </p>
]]></content>
      
        <categories>
            
            <category> Learning in BNDS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[NOIp 2016 (Senior) Day 2 Problems]]></title>
      <url>/2016/11/23/NOIp-2016-Senior-Day-2-Problems/</url>
      <content type="html"><![CDATA[
	<iframe src="http://www.slideshare.net/slideshow/embed_code/key/rUrN6h3f4uj9ta" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">

</div>]]></content>
      
        <categories>
            
            <category> Learning in BNDS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NOIp 2016 (Senior) Day 1 Problems]]></title>
      <url>/2016/11/19/NOIp-2016-Senior-Day-1-Problems/</url>
      <content type="html"><![CDATA[
	<iframe src="http://www.slideshare.net/slideshow/embed_code/key/7dNNrookvlt9he" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">

</div>]]></content>
      
        <categories>
            
            <category> Learning in BNDS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[High Way]]></title>
      <url>/2016/11/01/High-Way/</url>
      <content type="html"><![CDATA[<p>Teacherone is a busy man! He is going to work out for several month. Therefore taking trains is a good choice to travel between some cities. However, there are some conflicts between those transportation companies in those cities. What problem does teachone meets? Let’s help him out!</p>
<a id="more"></a>
<h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>In the year 2100, human finally finish building a high-speed railway, which connects each country in the world(It’s not a circle but a line). There are $N$ countries in the world, but the relationships between each countries are not very good, so if teacherone wants to take a train from one country to another, he must buy tickets for each segment of the railway seperately. For example, if he wants to go to country $i+2$ from country $i$, he needs to spend $Ai$ RMB for $i$ to $i+1$ and $Ai+1$ RMB for $i+1$ to $i+2$. This rediculous policy causes lots of unconviniences for the people arround the world. Thus those countries, which are running this railway service  made a policy: One can spend $Bi$ RMB to buy a card and pop up money into the card, then use the money in the card to take the train. And people who uses the card just need to pay $Ci$ RMB for the trip($Ci$&lt;$Bi$). The card can be bought from the Internet (One doesn’t need to buy it in the station). Also, because of the bad relationship, one needs to buy the card seperately for one segment of railway.</p>
<p>Now Teacherone has a travel plan, he wants to go to $M$ places. He starts from $P_1$ and go to $P_2$, and $P_2$ to $P_3$ …. He wants to spend money as little as he can, so he finds you to ask for help. Please help him figure out the minimum amount of money that he will spend.</p>
<blockquote>
<p>Input: </p>
<p>The first line contains two positive integers N, M</p>
<p>The second line contains M numbers represents $P_i$</p>
<p>Last N-1 lines contains three integers for each, represents $A_i$, $B_i$ and $C_i$ for the $i^th$ segment of railway service.</p>
<p>Output:</p>
<p>A single line contains the minimum amount of money that teacherone will spend.</p>
</blockquote>
<hr>
<h3 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h3><p>If you understand the meaning of the problem, you probably can figure out the solution very quickly— Just pure simulation. However, the brute force simulation will bring you a <strong>TLE</strong>. Because this prolem inludes lots of interval operation. Therefore, we can use <a href="http://ad1024.tech/Algorithm-Template/#Interval-Tree">Interval Tree</a> to solve this problem. We need to write a interval tree that supports interval update. Then we use greedy strategy to figure out wether we should buy tickets for a segment of service or buy a card.</p>
<h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">define</span> lson(x) x&lt;&lt;1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> rson(x) x&lt;&lt;1|1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> MID(x,y) (x+y)>>1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> bk break</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> V<span class="token punctuation">;</span>


ll A<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> N<span class="token punctuation">,</span>K<span class="token punctuation">;</span>
<span class="token keyword">int</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> M<span class="token punctuation">,</span>T<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Optimized read int.</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        a <span class="token operator">+</span><span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        a <span class="token operator">+</span><span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
ll G<span class="token punctuation">[</span><span class="token number">100010</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll num<span class="token punctuation">[</span><span class="token number">100010</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span><span class="token number">100010</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> add<span class="token punctuation">[</span><span class="token number">100010</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">pushDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        add<span class="token punctuation">[</span><span class="token function">lson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum<span class="token punctuation">[</span><span class="token function">lson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>mid<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        add<span class="token punctuation">[</span><span class="token function">rson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum<span class="token punctuation">[</span><span class="token function">rson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>mid<span class="token punctuation">)</span><span class="token operator">*</span>add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>qr <span class="token operator">||</span> ql<span class="token operator">></span>r<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>ql <span class="token operator">&amp;&amp;</span> r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>val<span class="token punctuation">;</span>
        add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">pushDown</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">rson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span><span class="token function">lson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span><span class="token function">rson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>qr <span class="token operator">||</span> ql<span class="token operator">></span>r<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>ql <span class="token operator">&amp;&amp;</span> r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">pushDown</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">lson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">)</span>
    <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">rson</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    N<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>M<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> b<span class="token punctuation">,</span>e<span class="token punctuation">;</span>
        b<span class="token operator">=</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token operator">=</span>G<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>e<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token punctuation">,</span>b<span class="token punctuation">,</span>e<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Interval Update</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> Ai<span class="token punctuation">,</span>Bi<span class="token punctuation">,</span>Ci<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token number">-1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Ai<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Bi<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Ci<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll t <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>Ai<span class="token operator">*</span>t<span class="token punctuation">,</span>Bi<span class="token operator">*</span>t<span class="token operator">+</span>Ci<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>### </p>
<p>### </p>
]]></content>
      
        <categories>
            
            <category> Interval Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> BNDSOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vigenère Code]]></title>
      <url>/2016/10/30/Vigenere-Code/</url>
      <content type="html"><![CDATA[<p>Vigenère Code is a sort of encryption method invented by a French cryptologist. It is widely used in The American Civil War. Now you are going to decrypt a sequence of characters, which is encrypted by using this encryption method.</p>
<a id="more"></a>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Just like what I told you in the brief introduction of this problem. The idea of Vigenère Code encryption is to encrypt a sentence or sequences of charaters by using a $Key$. Here is the correspoding relationships between characters:</p>
<p><img src="/2016/10/30/Vigenere-Code/key_map.jpg" alt="Key Map"></p>
<p>Therefore if the original message is “Helloworld” and the secrete key is “abc”:<img src="/2016/10/30/Vigenere-Code/Sample.png" alt="Sample">Obviously we can know that if the length of the key is shorter than the original message, we should copy it again and again until the length of the key equals to that of the original message. The encrypted message of the sample given above if “Hfnlpyosnd”</p>
<p><em>Note that we shoud keep the case of each characters in the original message after encrypting the message. And we should, however, ignore the case of the key</em></p>
<blockquote>
<p>Format of Input: Two lines in the input. The first line is the key, which was used to encrypt the original message. The second line is the message that is encrypted.</p>
<p>Format of Output: A single line contains the original message.</p>
</blockquote>
<hr>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>We should not forget that we are decrypting the encypted message, instead of encypting it. Thus we cannot directly use the mapping relationship shown above. What we should do in order to solve the problem in a very fast way is to make a <strong>Decryption Table</strong> before we scan the message. Because decrypting means looking up the corresponding character by using the letter at the start of the row and the letter in that row. For example, if the letter of the key is ‘B’ and the letter in the encrypted message is ‘L’, then we can know that the letter of original message if ‘K’.</p>
<p>So, how can we generate the decryption list? Let’s take a look at the encryption list first. Just look at each row, do you realize something funny? Yeah, each row starts from the letter noted in the head of the row:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Key/Msg</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">A</td>
<td style="text-align:center">B</td>
<td style="text-align:center">C</td>
<td style="text-align:center">D</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">B</td>
<td style="text-align:center">C</td>
<td style="text-align:center">D</td>
<td style="text-align:center">E</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">C</td>
<td style="text-align:center">D</td>
<td style="text-align:center">E</td>
<td style="text-align:center">F</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">A</td>
<td style="text-align:center">B</td>
<td style="text-align:center">C</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>We can use this feature to generate a decryption list. After generating the decryption table, we can just scan over the encrypted message and go over the key once and once again to look up the letter correspond to the key and the encrypted message.</p>
<hr>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;

inline char nextChar(char x){
    return x+1>'z'?'a':x+1; // Go to next character
}

char list[200][200];

void generateList(){
    for(char i='a';i<='z';++i){
        int j=0;
        char k=i;
        while(j<26){
            list[i][k]='a'+j;
            k=nextChar(k);
            ++j;
        }
    }
}
char sec[1001];
char key[1001];
int keylen;
inline int nextCur(int x){
    return x+1==keylen?0:x+1; // Go to next index of key
}

int main(){
    generateList();
    gets(key);
    gets(sec);
    keylen=strlen(key);
    for(int i=0;i<keylen;++i){
        if(key[i]>='A' && key[i]<='Z') // Modify every charaters in the key to lower case
            key[i]+=32;
    }
    int cur=0;bool isupper;
    for(int i=0;i<strlen(sec);++i){
        isupper = false;
        if(sec[i]>='A' && sec[i]<='Z'){
            sec[i]+=32;
            isupper=true; // Tag the message if it's upper case
        }
        char ans = list[key[cur]][sec[i]]; // Look up the letter in the table
        cur=nextCur(cur);
        if(isupper) ans-=32; // If is upper case
        putchar(ans); // Output the letter in original message
    }
    putchar('\n');
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> BNDSOJ </tag>
            
            <tag> String Processing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cubic Equation]]></title>
      <url>/2016/10/23/cubic-equation/</url>
      <content type="html"><![CDATA[<p>This post will tell you how to solve a cubic equation by computer programming.<br><a id="more"></a></p>
<h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>Given a cubic equation:$Ax^3+Bx^2+Cx+D=0$,and the range of all roots of the equation is [-100,100].How to find all of the roots of the equation?</p>
<h3 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h3><p>Apparently, we can use binary search to solve the problem. First we use a loop from i=-100 to 100 to find an i such that $f(i) * f(i+1)&lt;0$ OR $f(i)=0$ OR $f(i+1)=0$. If the first condition is matched, we use binary search to find the exact root of the equation.</p>
<h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">double</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">define</span> eps 10e-5</span>
<span class="token macro property">#<span class="token directive keyword">define</span> db double</span>

db <span class="token function">MID</span><span class="token punctuation">(</span>db l<span class="token punctuation">,</span>db r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">2.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

db <span class="token function">f</span><span class="token punctuation">(</span>db x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> A<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span>B<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span>C<span class="token operator">*</span>x<span class="token operator">+</span>D<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

db <span class="token function">binSearch</span><span class="token punctuation">(</span>db l<span class="token punctuation">,</span>db r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">&lt;=</span>eps<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    db mid <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db ll<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>db rr<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>ll<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binSearch</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>rr<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binSearch</span><span class="token punctuation">(</span><span class="token function">MID</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cin<span class="token operator">>></span>A<span class="token operator">>></span>B<span class="token operator">>></span>C<span class="token operator">>></span>D<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ct<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>db i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        db m<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>db n<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ct<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//puts("m");</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ct<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f "</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//puts("n");</span>
            <span class="token operator">++</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">*</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            db ans<span class="token operator">=</span><span class="token function">binSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                ct<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf "</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//puts("ans");</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Divide And Conquer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> BNDSOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Copy Paste]]></title>
      <url>/2016/10/05/Copy-Paste/</url>
      <content type="html"><![CDATA[<p>kkk最近才学会输出语句，非常兴奋，就要输出N行“6”来表达她的兴奋。但是一条一条语句打呢又太慢，所以kkk就想到了——复制&amp;粘贴！</p>
<p>当然一开始kkk会先打出一条输出语句，然后她可以选择复制粘贴。每次kkk可以复制1~t条语句（其中t表示当前的输出语句数）并粘贴。那么kkk最少需要复制几次才能写出N行“6”呢？</p>
<a id="more"></a>
<h2 id="Problem-Description-English-Version"><a href="#Problem-Description-English-Version" class="headerlink" title="Problem Description(English Version)"></a>Problem Description(English Version)</h2><p>kkk learnt how to print characters on a screen recently, so he is very happy now. He wants to print ‘6’ in N lines to express his emotion. However  typing those N lines in is very time-consuming, thus he finds a perfect solution: Copy&amp;paste.</p>
<p>Of course kkk will type a line of output statement, then she can choose to copy and paste. kkk can copy 1~t lines each time(t&lt;=number of current output statement) and paste them. So, how many time ,at least, should kkk copy such that there are finally N lines of ‘6’?</p>
<hr>
<h2 id="题目分析-Analysis"><a href="#题目分析-Analysis" class="headerlink" title="题目分析(Analysis)"></a>题目分析(Analysis)</h2><p>我们通过分析可以发现：每次如果将全部语句复制并且粘贴，那么最终会有$2^k$条输出语句。根据贪心法则，当在k-1次操作并且$2^k&lt;=N$时，我们将复制全部语句然后粘贴上去。因此我们可以从1每次乘2然后每次判断一下是否到达条件。注意在k-1次操作，$2^k&gt;N$时，我们将ans+1之后直接退出。</p>
<p>但是这样做是十分耗时的(即使能够AC也要100ms+)，我们还有一个更快速的方法。在这之前大家需要知道:<br>$$x&amp;(x-1)$$<br>该语句可以用于判断x是否是$2^k$，只需要判断一下是否是0即可。那么我们可以从$N$一直减到符合条件的$x$，然后用C语言中的log函数求当前的$k$是多少。注意C语言中log的底数是$e$(约等于2.718的那个)，因此我们通过换底公式:<br><img src="/2016/10/05/Copy-Paste/Log.png" alt="Formula"></p>
<p>通过这个方法我们能够直接得出每一步都全部复制，复制到有$x$个语句时需要多少次。然后我们判断一下$N-x$是否大于$x$，如果大于$x$就需要复制两次，反之复制一次即可。</p>
<hr>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><p>时间消耗: 101ms</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> N<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
            i<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">></span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
                ans<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<p>时间消耗: 27ms</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
using namespace std;

typedef long long ll;
inline int read()    
{    
    char ch;  
    bool flag = false;  
    int a = 0;    
    while(!((((ch = getchar()) &gt;= &#39;0&#39;) &amp;&amp; (ch &lt;= &#39;9&#39;)) || (ch == &#39;-&#39;)));    
    if(ch != &#39;-&#39;)  
    {  
        a *= 10;  
        a += ch - &#39;0&#39;;    
    }  
    else  
    {  
        flag = true;  
    }  
    while(((ch = getchar()) &gt;= &#39;0&#39;) &amp;&amp; (ch &lt;= &#39;9&#39;))  
    {  
        a *= 10;  
        a += ch - &#39;0&#39;;  
    }     
    if(flag)  
    {  
        a = -a;  
    }  
    return a;    
}    
void write(int a)    
{    
    if(a &lt; 0)  
    {  
        putchar(&#39;-&#39;);  
        a = -a;  
    }  
    if(a &gt;= 10)  
    {  
        write(a / 10);  
    }         
    putchar(a % 10 + &#39;0&#39;);    
}

int main(){
    ll x;
    while(~scanf(&quot;%lld&quot;,&amp;x)){
        ll N=x;
        if(x==1) {
            puts(&quot;0&quot;);
            continue;
        }else if(x==2){
            puts(&quot;1&quot;);
            continue;
        }
        while(!(x&amp;(x-1))){
            x--;
        }
        ll tms = log(x)/log(2);
        ll k=N-x;
        if(k&gt;x){
            tms+=2;
        }else tms+=1;
        write(tms);
        puts(&quot;&quot;);
    }
    puts(&quot;0&quot;);
    return 0;
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> LuoguOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[High-Accuracy-Real-Number-Addition]]></title>
      <url>/2016/10/01/High-Accuracy-Real-Number-Addition/</url>
      <content type="html"><![CDATA[<p>对于高精度加法更加复杂的情况，需要进行诸多分类讨论:</p>
<ol>
<li>小数+整数</li>
<li>整数+整数</li>
<li>小数+小数</li>
</ol>
<p>同时还存在进位去零的问题:</p>
<ol>
<li>进位后无后缀0</li>
<li>进位后存在后缀0但0不全是后缀</li>
<li>小数部分全部是0<br>这个模拟有些小复杂，不过细心一点还是可以1A的。<a id="more"></a>
</li>
</ol>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>输入2个正实数m，n（0&lt;m,n&lt;10^25），求这两个数的和并输出。</p>
<p>Input:<br>一行输入，两个正实数m,n。</p>
<p>Output:<br>输出一行，即它们的和，注意小数点后面多余的0不要输出，如果计算出来的小数部分为0，小数与小数点均不输出</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>这是对于高精度加法的升级版，解决途径有两个:</p>
<ol>
<li>拆分数字：将数组拆为整数部分和小数部分然后分别处理。这种方法实现起来需要很多分类讨论，但是不需要管小数点在哪。</li>
<li>干掉小数点，整体做高精度加法。这种方法简单粗暴但是不方便记录小数点位置。<br>由于我是按照方法1做的，因此这里只详细讲解方法1的思路。</li>
</ol>
<hr>
<p>由于输入的是正实数，因此我们需要分类讨论：</p>
<ol>
<li>整数+整数</li>
<li>小数+小数</li>
<li>整数+小数</li>
</ol>
<p>情况1 整数+整数<br>这个情况就是喜闻乐见的标准高精度加法。直接高精度然后输出即可。</p>
<p>情况2 小数+小数<br>小数+小数我们需要将两个小数都拆分为：整数部分和小数部分。由于小数点后位数不一定相等，因此我们需要往较短的小数部分后补后缀0（如果不补的话12.2+12.33会输出24.35）。补齐0后直接先对小数部分进行高精度加法，如果需要进位我们记录一下；之后进行整数部分高精度加法，如果需要进位就在高精之后再加1。<br><strong>注意：在进行小数部分高精加的时候，最后如果需要进位不需要补齐前缀0因为这个不需要保留后缀0，如果加了前缀0会导致999.99+0.1出现神奇的情况</strong></p>
<p>情况3 小数+整数<br>这个情况要比情况2简单一些，但是需要注意的是，如果小数的小数部分全是0（如：2.00000000），我们需要在输出时去掉。因此小数+整数的情况，我们先将小数拆分为整数部分和小数部分，然后整数部分和整数进行高精，最后输出的时候去掉小数部分的后缀0，如果去掉之后小数部分长度为0，那么我们就不必输出小数点和小数部分了。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
<span class="token keyword">bool</span> yes<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span>string s2<span class="token punctuation">,</span><span class="token keyword">bool</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//flag=true时进行整数部分加法 否则是小数部分</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum<span class="token operator">+</span><span class="token operator">=</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> sum<span class="token operator">+</span><span class="token operator">=</span>s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
           s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>
        sum<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> s1<span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">+</span>s1<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//else s1='0'+s1;</span>
        yes<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">rem_z</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//去掉后缀0</span>
    <span class="token keyword">int</span> cur<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果全是0直接清空</span>
    <span class="token keyword">else</span> a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">bool</span> fa<span class="token punctuation">,</span>fb<span class="token punctuation">;</span>
    fa<span class="token operator">=</span>fb<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
    string d1<span class="token punctuation">,</span>d2<span class="token punctuation">;</span>
    string i1<span class="token punctuation">,</span>i2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果没找到小数点</span>
        fa<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        i1<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        d1<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//-----------------</span>
    pos<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>
        fb<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        i2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        d2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//-----------------</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa <span class="token operator">&amp;&amp;</span> fb<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 整数+整数</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//小数+整数</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rem_z</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">"."</span><span class="token operator">&lt;&lt;</span>d2<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fb<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//小数+整数</span>
        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>i1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rem_z</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">"."</span><span class="token operator">&lt;&lt;</span>d1<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>d2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>d2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> d1<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//较短的小数部分补齐后缀0</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>d2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> d2<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">add</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//小数部分高精加</span>
    <span class="token function">add</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span>i2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//整数部分高精加</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果小数部分最高位要进位</span>
        string one<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span>one<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> cur<span class="token operator">=</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉后缀0</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">--</span>cur<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> d1<span class="token operator">=</span>d1<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>i1<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>i1<span class="token operator">&lt;&lt;</span><span class="token string">"."</span><span class="token operator">&lt;&lt;</span>d1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> String-Processing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> BNDSOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[比大小]]></title>
      <url>/2016/09/28/Comparison/</url>
      <content type="html"><![CDATA[<p>基础字符串处理，不要犹豫，模拟模拟模拟啊！<br><a id="more"></a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="http://124.205.120.153/v3/problem_show.php?pid=36109" target="_blank" rel="external">比大小</a><br>给定两个贼大无比的数，输出较大的那个</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>分类讨论。情况1，两个字符串大小不相等；情况2，两个字符串大小相等。<br>当不相等时，直接输出长的字符串。相等时再从高位开始遍历两个字符串，直到找到不同的，返回较大的那个。</p>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">gt</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a比b长</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a比b短</span>
        cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 从高位遍历比较</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
    <span class="token function">gt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> String-Processing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> BNDSOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[打印蛇形矩阵]]></title>
      <url>/2016/09/28/Snake-Matrix/</url>
      <content type="html"><![CDATA[<p>打印蛇形矩阵题解For BNDS_NOIP入门班<br>不要想复杂，直接模拟膜拟模拟(好像有什么奇怪的东西进来了)<br><a id="more"></a><br>题目链接:<a href="http://124.205.120.153/v3/problem_show.php?pid=36097" target="_blank" rel="external">打印蛇形矩阵</a></p>
<h2 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h2><p>打印蛇形矩阵，如3*3的蛇形矩阵为:<br>1 2 3<br>8 9 4<br>7 6 5<br>以此类推。<br>0&lt;N&lt;10</p>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>事实上，我是暴力膜拟的这题。打印蛇形矩阵时，一个周期可以拆分为<br>1 2 3  右 输出3个</p>
<p>1 2 3  下 输出2个<br>    4<br>    5</p>
<p>1 2 3  左 输出2个<br>    4<br>7 6 5</p>
<p>1 2 3  上 输出1个<br>8   4<br>7 6 5</p>
<p>很容易看出这是转了一圈。这个看似没有什么规律，但是仔细想想：一个周期的第一个小周期都能够跑到N-周期数(从零开始的周期循环)。后半圈是N-周期数-1。因此我们开一个整型变量lap记录3/4周期数，因为我们发现每跑到第一个周期之后都要往上走，这时我们需要将lap++再走N-lap步。</p>
<hr>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//const int dx[4]={0,1,0,-1};</span>
<span class="token comment" spellcheck="true">//const int dy[4]={1,0,-1,0};</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>N<span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    <span class="token keyword">int</span> px<span class="token punctuation">,</span>py<span class="token punctuation">;</span>
    px<span class="token operator">=</span>py<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每个方格填的数字</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>N<span class="token operator">*</span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>py<span class="token operator">&lt;=</span>N<span class="token operator">-</span>lap<span class="token punctuation">;</span><span class="token operator">++</span>py<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//往右走</span>
            a<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>
            <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">--</span>py<span class="token punctuation">;</span>
        <span class="token operator">++</span>px<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>px<span class="token operator">&lt;=</span>N<span class="token operator">-</span>lap<span class="token punctuation">;</span><span class="token operator">++</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//往下走</span>
            a<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>
            <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">--</span>px<span class="token punctuation">;</span><span class="token operator">--</span>py<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>py<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">+</span>lap<span class="token punctuation">;</span><span class="token operator">--</span>py<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//往左走</span>
            a<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>py<span class="token punctuation">;</span>
        <span class="token operator">--</span>px<span class="token punctuation">;</span>
        <span class="token operator">++</span>lap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跑到这个周期的3/4了，lap要加1</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>px<span class="token operator">>=</span>lap<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>px<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//往上走</span>
            a<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>px<span class="token punctuation">;</span>
        <span class="token operator">++</span>py<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> BNDSOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Number Matrix]]></title>
      <url>/2016/09/16/Number-Matrix/</url>
      <content type="html"><![CDATA[<p>Given a 2*4 number matrix, and randomly filled in from 1-8. And there are 3 rules of moving those numbers:<br>(1) swap the first row and the second row;<br>(2) all numbers move to right 1 column(the last column will move to the first column);<br>(3) rotate four numbers which located in the center of the matrix clockwisely.</p>
<p>the Target status is<br>1 2 3 4<br>8 7 6 5</p>
<p>What is the number of minimum step?<br><a id="more"></a></p>
<h2 id="Problem-Description-Chinese"><a href="#Problem-Description-Chinese" class="headerlink" title="Problem Description(Chinese)"></a>Problem Description(Chinese)</h2><p><img src="/2016/09/16/Number-Matrix/problem.jpg" alt="ProblemDescription-CHN"></p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Because the status space of this problem is not very large, we can use BFS to solve the problem. The most complicated thing of the problem is that we need to manually implement the motion of those numbers. But it isn’t difficult, just complicated…<br>In order to simplify the code, I overrode the ‘[]’ operator which enabled me to use [] operator directly on my struct.<br>nxt: the extened status<br>k: current status</p>
<p>First movement:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Second Movement:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> m<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>
m<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
nxt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Third Movement(The most complex one):</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
nxt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><p>Time Consumption: 31 ms<br>Memory Consumption: 3.015 MB<br>Code Length: 1.692 KB</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> idx<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> __ans<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Pow10<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">10000000</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Pos<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> step<span class="token punctuation">;</span>
    <span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Pos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        step<span class="token operator">=</span>s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ret<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>Pow10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>__ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

queue<span class="token operator">&lt;</span>Pos<span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Pos s <span class="token operator">=</span> <span class="token function">Pos</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Pos k<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>k<span class="token punctuation">.</span>step<span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        Pos nxt<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*Alternation-1*/</span>
        nxt<span class="token punctuation">.</span>step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>nxt<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>nxt<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            nxt<span class="token punctuation">.</span>step<span class="token operator">=</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/*Alternation-2*/</span>
        nxt<span class="token punctuation">.</span>step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>
        m<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nxt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>nxt<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>nxt<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            nxt<span class="token punctuation">.</span>step<span class="token operator">=</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/*Alternation-3*/</span>
        nxt<span class="token punctuation">.</span>step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        nxt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>nxt<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            idx<span class="token punctuation">[</span><span class="token function">getNum</span><span class="token punctuation">(</span>nxt<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            nxt<span class="token punctuation">.</span>step<span class="token operator">=</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"act.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"act.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> BFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
            <tag> BNDS_NOIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Delete cache of Universal-Image-Loader manually]]></title>
      <url>/2016/09/16/Delete-cache-of-Universal-Image-Loader-manually/</url>
      <content type="html"><![CDATA[<p>Universal Image Loader is a popular graphic library in Android Development, since it maintains lots of useful functions, which are complicated for programmers to manually implement.<br>Universal Image Loader has a feature, it can save cache of pictures that are downloaded from the Internet. But if there are lots of cache in your phone, that will be a tremendous waste of your disk space.<br><a id="more"></a><br>According to the source code of Universal Image Loader, it will give every images a hash before it cache them on the disk. The hash is corresponding with the url of the picture.</p>
<p>Before we can use this library, we need to initialize some configurations such as the cache path, the maximum total size of cached files etc. But if we just want to delete those caches, we just need to initialize its storage path:</p>
<pre class="line-numbers language-java"><code class="language-java">ImageLoader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageLoaderConfiguration<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">diskCache</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnlimitedDiskCache</span><span class="token punctuation">(</span>StorageUtils
                            <span class="token punctuation">.</span><span class="token function">getOwnCacheDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"ShiyiquanImgs/Cache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>By using this code, we can initialize the ImageLoader on current context with an attribute, which is the storage path.<br>Thus, we can simply use the method called ‘clearDiskCache()’ in ImageLoader class.</p>
<pre class="line-numbers language-java"><code class="language-java">ImageLoader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearDiskCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic Development </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to create a fullscreen activity]]></title>
      <url>/2016/09/16/How-to-create-a-fullscreen-activity/</url>
      <content type="html"><![CDATA[<p>I added a splash screen to ShiYiQuan-Event today, and I wanted to make it be a full screen activity. However, lots of tutorials on the Internet no longer available. So I tried several times, and finally, succeeded.<br><a id="more"></a><br>The way to make an activity be a fullscreen activity is:</p>
<h3 id="First-step"><a href="#First-step" class="headerlink" title="First step"></a>First step</h3><p>Modify AndroidManifest.xml. Add ‘Theme’ attribute to the target activity to disable ActionBar in that activity.</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>
      <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Activities.SplashScreen<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>十一圈Event<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">android:</span>screenOrientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/AppTheme.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Second-step"><a href="#Second-step" class="headerlink" title="Second step"></a>Second step</h3><p>Add following code to hide system status bar. Note that you need to put this code before setting content of the activity.</p>
<pre><code>this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
</code></pre><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><p><img src="/2016/09/16/How-to-create-a-fullscreen-activity/screenshot.png" alt="Result"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic Development </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EightNumbers' Problem]]></title>
      <url>/2016/09/14/EightNumbers-Problem/</url>
      <content type="html"><![CDATA[<p>这是一个很有趣的问题，八数码问题。类似于华容道的规则。<br>在九宫格内给定数字1-8的摆放位置，0表示空地，相邻的数字可以移动进入0的位置。给定初始格局，求最少移动多少步可以达到目标状态。<br><a id="more"></a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="/2016/09/14/EightNumbers-Problem/Problem.jpg" alt="八数码"></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>网上很多题解使用双向BFS+Cantor展开判重写这题。事实上单向BFS+map判重也是可行的。我们可以把3*3的九宫格压缩为一个一维数组，交换规则有四个：上下、左右。判重时使用getSum()将整个数组转化为int存为map的键，值对应true/false。访问过改变标签。getSum()函数如下：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> Pow10<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">10000000</span><span class="token punctuation">,</span><span class="token number">100000000</span><span class="token punctuation">,</span><span class="token number">1000000000</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ret<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>Pow10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>(map原理是红黑树，深度为logN，和二叉树一样。所以访问的复杂度与状态扩展数量有关)</p>
<p>在移动时要注意一点。左右移动的时候不能出界，不能换到另一行:<br>1 2 3<br>4 5 6<br>7 8 9<br>转化为<br>1 2 3 4 5 6 7 8 9时，显然上下交换是Pos+3和Pos交换。左右交换时注意7 6、3 4是不可以互换的。这个在交换时要注意特判。<br>在每一次取队首元素时，判断一下是否到达最终状态，如果OK,直接输出。</p>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> fac<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">720</span><span class="token punctuation">,</span><span class="token number">5040</span><span class="token punctuation">,</span><span class="token number">40320</span><span class="token punctuation">,</span><span class="token number">362880</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Pow10<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">10000000</span><span class="token punctuation">,</span><span class="token number">100000000</span><span class="token punctuation">,</span><span class="token number">1000000000</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">define</span> L long</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ret<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>Pow10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> vis<span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tar<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> zzpos<span class="token punctuation">;</span>
<span class="token keyword">struct</span> Pos<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> step<span class="token punctuation">;</span>
    <span class="token keyword">int</span> zero<span class="token punctuation">;</span>
    <span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">Pos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>
        step<span class="token operator">=</span>s<span class="token punctuation">;</span>
        zero<span class="token operator">=</span>z<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>tar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
queue<span class="token operator">&lt;</span>Pos<span class="token operator">></span> q<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Pos</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>zzpos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    Pos k<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
            flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> zpos<span class="token operator">=</span>k<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>zpos<span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                Pos add<span class="token operator">=</span><span class="token function">Pos</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">,</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>zpos<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>zpos<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">[</span>zpos<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>zpos<span class="token number">-3</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                Pos add<span class="token operator">=</span><span class="token function">Pos</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">,</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>zpos<span class="token number">-3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>zpos<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">[</span>zpos<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>zpos<span class="token operator">+</span><span class="token number">1</span><span class="token operator">!=</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> zpos<span class="token operator">+</span><span class="token number">1</span><span class="token operator">!=</span><span class="token number">6</span> <span class="token operator">&amp;&amp;</span> zpos<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                Pos add<span class="token operator">=</span><span class="token function">Pos</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">,</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>zpos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>zpos<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">[</span>zpos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>zpos<span class="token number">-1</span><span class="token operator">!=</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> zpos<span class="token number">-1</span><span class="token operator">!=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> zpos<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                Pos add<span class="token operator">=</span><span class="token function">Pos</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>a<span class="token punctuation">,</span>k<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>zpos<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>zpos<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">[</span>zpos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    vis<span class="token punctuation">[</span><span class="token function">getSum</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"number.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"number.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> zzpos<span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>tar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> BFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
            <tag> BNDS_NOIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MatchesEquation]]></title>
      <url>/2016/09/14/MatchesEquation/</url>
      <content type="html"><![CDATA[<p>One day, AD1024 and Neli playing a game, they are using N matches to create equations: X+Y=Z(‘+’ and ‘=’ also created by using matches).<br>But they are too weak to work out every possible conditions, so they decide to ask you for help. You are a battlehardened programmer, so you can solve this problem by using programming.</p>
<a id="more"></a>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p><img src="/2016/09/14/MatchesEquation/Problem-CNH.jpg" alt="Problem-CNN"></p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>This problem looks very hard, but it’s pretty easy. We can pre-process the number of matches that will be used creating number N.打表打表打表.</p>
<p>##AC Code</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> matches<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"matches.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"matches.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    n<span class="token operator">-</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>matches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    ans<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Search-Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
            <tag> BNDS_NOIP </tag>
            
            <tag> Brute Force </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Equation]]></title>
      <url>/2016/09/14/Equaltion/</url>
      <content type="html"><![CDATA[<p>In Olympiad Of Mathematics, a problem which require participants to insert ‘+’ or ‘-‘ between two numbers to let the equation correct.<br>For instance:<br>1 2 3 4 5 6 7 8 9=108<br>You can insert ‘+’ or ‘-‘ or nothing between each two numbers. If you leave it empty, numbers between the gap will combine into one number(If I leave blank between 1 and 2 empty, the number is 12). You are required to find the number of total ways, which can let the equation correct.<br><a id="more"></a></p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<blockquote>
<p>In Olympiad Of Mathematics, a problem which require participants to insert ‘+’ or ‘-‘ between two numbers to let the equation correct.<br>For instance:<br>1 2 3 4 5 6 7 8 9=108<br>You can insert ‘+’ or ‘-‘ or nothing between each two numbers. If you leave it empty, numbers between the gap will combine into one number(If I leave blank between 1 and 2 empty, the number is 12). You are required to find the number of total ways, which can let the equation correct.</p>
</blockquote>
</blockquote>
<p>Input: N, represents the total sum<br>Output: the number of total methods to fill the blanks.</p>
<p>Sample Input:<br>108</p>
<p>Output:<br>15</p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Apparently, we can enumerate each status of each blanks(3 status and 8 blanks). The algorithm complexity will be 3^8, it’s small enough to pass the test.<br>This time , I used a wired way to implement the algorithm: just use loops. By combine 8 loops together, and enumerate 3 status (using 0 represents ‘+’, 1 represents ‘-‘ and 2 represents leaving empty).</p>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> rep(i) for(i=0;i&lt;3;++i)</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Pow10<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">10000000</span><span class="token punctuation">,</span><span class="token number">100000000</span><span class="token punctuation">,</span><span class="token number">1000000000</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"4.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"4.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>sum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> op<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                <span class="token function">rep</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                    res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> kk<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>kk<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">--</span>kk<span class="token punctuation">)</span><span class="token punctuation">{</span>
                                        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                            res<span class="token operator">+</span><span class="token operator">=</span>kk<span class="token punctuation">;</span>
                                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                            res<span class="token operator">-</span><span class="token operator">=</span>kk<span class="token punctuation">;</span>
                                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                                            <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                                            <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                                            <span class="token keyword">while</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                                num<span class="token operator">+</span><span class="token operator">=</span>kk<span class="token operator">*</span>Pow10<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                                                <span class="token operator">--</span>kk<span class="token punctuation">;</span>
                                            <span class="token punctuation">}</span>
                                            num<span class="token operator">+</span><span class="token operator">=</span>kk<span class="token operator">*</span>Pow10<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                            <span class="token comment" spellcheck="true">//printf("%d ",num);</span>
                                            <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                                res<span class="token operator">+</span><span class="token operator">=</span>num<span class="token punctuation">;</span>
                                            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                                res<span class="token operator">-</span><span class="token operator">=</span>num<span class="token punctuation">;</span>
                                            <span class="token punctuation">}</span>

                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">}</span>
                                    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                        res<span class="token operator">++</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                    <span class="token comment" spellcheck="true">//puts("");</span>
                                    <span class="token comment" spellcheck="true">//cout&lt;&lt;"res:"&lt;&lt;res&lt;&lt;'\n';</span>
                                    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>
                                        ans<span class="token operator">++</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Search-Algorithms </category>
            
            <category> DFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
            <tag> BNDS_NOIP </tag>
            
            <tag> Brute Force </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSK-T40 PartyGame]]></title>
      <url>/2016/08/05/JSK-T40-PartyGame/</url>
      <content type="html"><![CDATA[<p>百度之星总决赛即是一群编程大牛一决高下的赛场，也是圈内众多网友难得的联欢，在为期一周的聚会中，总少不了各种有趣的游戏。<br>Through this problem, you can know how to use the degree of Directed graph to solve problems.<br>From JSK-OnlineJudge<br><a id="more"></a></p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>&gt;<br>某年的总决赛聚会中，一个有趣的游戏是这样的：<br>游戏由Robin主持，一共有N个人参加（包括主持人），Robin让每个人说出自己在现场认识的人数（如果A认识B，则默认B也认识A），在收到所有选手报出的数据后，他来判断是否有人说谎。Robin说，如果他能判断正确，希望每位选手都能在毕业后来百度工作。<br>为了帮Robin留住这些天才，现在请您帮他出出主意吧~<br>输入数据包含多组测试用例，每组测试用例有2行，首先一行是一个整数N (1 &lt; N ≤ 100)，表示参加游戏的全部人数，接下来一行包括N-1个整数，表示除主持人以外的其余人员报出的认识人数。N为0的时候结束输入。<br>请根据每组输入数据，帮助主持人Robin进行判断：如果确定有人说谎，请输出“Lie absolutely”。否则，请输出“Maybe truth”每组数据的输出占一行。<br>&gt;<br>English Version:<br>  A* Star Contest is a contest which can provide a platform for programmers who want’s to show their own programming skills. During a party which will last for a whole week, they always play various of games.<br>  Once in a party, there was an interesting game:<br>    The game was hosted by Robin, and there were N people took part in the game. Robin let each of those people tell him the number of people whom they know, and those people must be participants of the game. After collecting those data, Robin wanted to know wether there were people lying.<br>  Input data including several test cases. In each cases the first line is number N(1 &lt; N ≤ 100) representing the number of participants of the game(including Robin), the second line includes N-1 numbers represents the number of people who are known by the  participant.</p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Apparently, the goal of the problem (Or Key) is to see wether every out degree can be equally subtracted.Provide array ‘in’ store in degrees of each node, initially, in[1]=N-1 which represents the in degree of Robin.In each outer loop, we scan in from 1 to N, if in[i] is 0,we just do the next loop.And in each inner loop, we scan in from i+1 to i+in[i]–&gt;j, if in[j] isn’t 0, we can let in[j] and in[i] decrease 1. And after an outer loop(From 1 to N) we need to check the in degree of in[i], if in[i] isn’t zero which means the out degree does not fit its in degree, we can output “Lie absolutely” directly. Otherwise, we sort the in from big to small, then do next outer loop.<br>Because of the sort operation, we can guarantee that after every loop if the input is aims for “Maybe truth”, all values in array ‘in’ will be 0.<br>For instance:<br>  an input case is</p>
<p>  7</p>
<p>  5 4 5 2 1 3</p>
<p>  The Following Steps are:</p>
<p>  6 5 5 4 3 2 1</p>
<p>  0 4 4 3 2 1 0</p>
<p>  4 4 3 2 1 0 0</p>
<p>  0 3 2 1 0 0 0</p>
<p>  3 2 1 0 0 0 0</p>
<p>  1 1 0 0 0 0 0</p>
<p>  In the last step we found that in[1] is not 0, so in this case, the output is “Lie absolutely”.</p>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> in<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>N <span class="token operator">&amp;&amp;</span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            cin<span class="token operator">>></span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        in<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>N<span class="token number">-1</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> ans<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>in<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>in<span class="token operator">+</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> loopCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>loopCnt<span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            loopCnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> k<span class="token operator">=</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token operator">+</span>k<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    in<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                    in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span><span class="token string">"Lie absolutely\n"</span><span class="token punctuation">;</span>
                ans<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">sort</span><span class="token punctuation">(</span>in<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>in<span class="token operator">+</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Maybe truth\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Graph Theory </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> JiSuanKe </tag>
            
            <tag> A* Contest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Infinite Maze]]></title>
      <url>/2016/07/27/Codeforces-Infinite-Maze/</url>
      <content type="html"><![CDATA[<p>A good problem. It requires us to use DFS+Memorization to handle the issue.<br>From Codeforces.<br><a id="more"></a></p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>We’ve got a rectangular n × m-cell maze. Each cell is either passable, or is a wall (impassable). A little boy found the maze and cyclically tiled a plane with it so that the plane became an infinite maze. Now on this plane cell (x, y) is a wall if and only if cell  (x mod n, y mod m)is a wall.<br>In this problem (a mod b) is a remainder of dividing number a by number b.<br>The little boy stood at some cell on the plane and he wondered whether he can walk infinitely far away from his starting position. From cell (x, y) he can go to one of the following cells: (x, y - 1), (x, y + 1), (x - 1, y) and (x + 1, y), provided that the cell he goes to is not a wall.<br>Input<br>The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1500) — the height and the width of the maze that the boy used to cyclically tile the plane.<br>Each of the next n lines contains m characters — the description of the labyrinth. Each character is either a “#”, that marks a wall, a “.”, that marks a passable cell, or an “S”, that marks the little boy’s starting point.<br>The starting point is a passable cell. It is guaranteed that character “S” occurs exactly once in the input.<br>Output<br>Print “Yes” (without the quotes), if the little boy can walk infinitely far from the starting point. Otherwise, print “No” (without the quotes).</p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Well, it’s not a really hard problem though the data range looks very horrible..In this problem, we can use DFS+Memorization to solve the problem.<br>Provide the position is (x,y), the mapping on the character graph is x’=(x%N+N)%N y’=(y%M+M)%M. if(g[x’][y’]==’#’) then return false. The memorization is: set a array vis[N][M][2].After we visit a position (x,y), we can check vis[x’][y’][0]=?=x and vis[x’][y’][1]=?=y.If it returns false(vis[x’][y’][0]!=x or vis[x’][y’][1]!=y), we can directly return true. Because we’ve enter the next graph.<br>Then we just need to DFS in four directions.</p>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>
<span class="token keyword">bool</span> f<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> g<span class="token punctuation">[</span><span class="token number">1501</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1501</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">1501</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1501</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> D<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">%</span>M<span class="token operator">+</span>M<span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>
    <span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token punctuation">(</span>y<span class="token operator">%</span>N<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0x3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> vis<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>y <span class="token operator">||</span> vis<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vis<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">+</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>M<span class="token operator">>></span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">;</span>
        f<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    x1<span class="token operator">=</span>i<span class="token punctuation">;</span>
                    y1<span class="token operator">=</span>j<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x3f3f3f</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">)</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Search-Algorithms </category>
            
            <category> DFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ Eeny Meeny Moo]]></title>
      <url>/2016/07/27/BNUOJ-Eeny-Meeny-Moo/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>There is a computer classroom. We all know that if there are lots of people surf the net at the same time, the speed will be very slow. Now, the administrator of the classroom will turn off all computers in certain rule. There are N computers marked with number 1,2,…,N. The administrator will first turn off the computer No.1, then he will turn off the computer who is M after than the previous one.(The computer)<br>E.G.<br>if there are 5 computers and M=3, the turning off order is:<br>1 4 3 5 2</p>
<p>if M=2, the order is:<br>1 3 5 4 2</p>
<p>Now,there are N computers, AD1024 is using the computer No.2, and he wants to know the minimum value of M such that AD1024’s computer can be the last computer which will be turned off.</p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>The problem uses the concept of Joseph Circle. And there is a formula of the problem:<br>Provide k will be turned off in ith term, (k+N)%i will be turned off in the next term.If know this formula, the problem is much easier. Because we just need to enumerate the value of M. Then output the first value of M that fits the problem.</p>
<p>I’ve to say that it is so mathematical…..</p>
<p>##AC CODE</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                s<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>M<span class="token punctuation">)</span><span class="token operator">%</span>i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            M<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout<span class="token operator">&lt;&lt;</span>M<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Mathematics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BNUOJ </tag>
            
            <tag> Beginner </tag>
            
            <tag> 北京师范大学程序设计竞赛热身赛第一场 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ Deli Deli]]></title>
      <url>/2016/07/27/BNUOJ-Deli-Deli/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p><a href="https://www.bnuoj.com/v3/problem_show.php?pid=1010" target="_blank" rel="external">ProblemUrl</a></p>
<p>Give you M English words, and you need to output the word in plural form. Note that there will be N given rules to change the word into plural form.</p>
<p>Input:<br>The First line are two integer N and M;<br>The second to the (N-1)th lines are given rules , each line contains two strings, the first is the normal form and the second string is plural form.<br>The Nth line to the (N+M)th lines are words you need to figure out by yourself.</p>
<p>Output:<br>Totally M lines, each line contains one word.</p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Matching given rules is not a hard work, we can use std::map to store those given rules.<br>And the we know the basic rules of transforming a word into plural form. Therefore we can firstly judge wether the word end up with ‘y’.</p>
<pre><code>if str[str.length()-1]==&#39;y&#39; AND str[str.length()-2] is not vowel character
then str[str.length()-1]=i;cout&lt;&lt;str&lt;&lt;&quot;es&quot;&lt;&lt;endl;
</code></pre><p>Then we need to check wether the word ends up with ch || sh || o || x<br>If none of those are matched, we can just cout&lt;&lt;str&lt;&lt;”s”;</p>
<p>Yeah, it’s an easy problem….I just wanna 划划水(Do some easy work to seek for confidence)</p>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> list<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> idx<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> orth<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> L<span class="token punctuation">,</span>N<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>L<span class="token operator">>></span>N<span class="token punctuation">;</span>
    string str<span class="token punctuation">,</span>strp<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>str<span class="token operator">>></span>strp<span class="token punctuation">;</span>
        list<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">=</span>strp<span class="token punctuation">;</span>
        idx<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>str<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span>list<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>orth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>orth<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>orth<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>orth<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>orth<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'i'</span><span class="token punctuation">;</span>
                str<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"es"</span><span class="token punctuation">;</span>
                cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">+</span><span class="token string">'s'</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'o'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'s'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">+</span><span class="token string">"es"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'c'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">+</span><span class="token string">"es"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">+</span><span class="token string">'s'</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> BNUOJ </tag>
            
            <tag> Beginner </tag>
            
            <tag> 北京师范大学程序设计竞赛热身赛第一场 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ Primary Arithmetic]]></title>
      <url>/2016/07/27/BNUOJ-Primary-Arithmetic/</url>
      <content type="html"><![CDATA[<p>Given DEC number a,b. Please figure out how many times carry operations will happen.<br>From BNUOJ/北师大程序设计竞赛热身赛第一场<br><a id="more"></a></p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p><a href="https://www.bnuoj.com/v3/problem_show.php?pid=1006" target="_blank" rel="external">ProblemUrl</a><br>Given DEC number a,b. Please figure out how many times carry operations will happen.<br>Example:<br>  122 8: Carry operation will happen once.–&gt; 2+8=10 will cause a carry operation.</p>
<p>Sample Input:<br>123 456<br>555 555<br>123 594<br>0 0</p>
<p>Sample Output:<br>No carry operation.<br>3 carry operations.<br>1 carry operation.</p>
<p>TIPS:There will be several input cases, if a==b==0, terminate the program.</p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>It is a simple simulation problem. We all know the artificial add operation(High-accuracy or Big integer calculating). We can just use that way to solve the problem.</p>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>
<span class="token keyword">int</span> lena<span class="token punctuation">,</span>lenb<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        A<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    lena<span class="token operator">=</span>cur<span class="token punctuation">;</span>
    cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>
        b<span class="token punctuation">[</span><span class="token operator">++</span>cur<span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        B<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    lenb<span class="token operator">=</span>cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>A<span class="token operator">>></span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">==</span>B <span class="token operator">&amp;&amp;</span> A<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        lena<span class="token operator">=</span>lenb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> addb<span class="token punctuation">,</span>adda<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>lena <span class="token operator">||</span> i<span class="token operator">&lt;=</span>lenb<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>lenb<span class="token punctuation">)</span> addb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> addb<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>lena<span class="token punctuation">)</span> adda<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> adda<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            t<span class="token operator">=</span>adda<span class="token operator">+</span>addb<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
                t<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cnt<span class="token operator">++</span><span class="token punctuation">;</span>
                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No carry operation."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"1 carry operation."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span><span class="token string">" carry operations."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Simulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> BNUOJ </tag>
            
            <tag> Beginner </tag>
            
            <tag> 北京师范大学程序设计竞赛热身赛第一场 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Original Sort Algorithm:QueueSort]]></title>
      <url>/2016/07/01/Original-Sort-Algorithm-QueueSort/</url>
      <content type="html"><![CDATA[<p>A simple implementation of radix sort by using 10 Queues.<br><a id="more"></a></p>
<h2 id="Thought-of-QUEUESORT"><a href="#Thought-of-QUEUESORT" class="headerlink" title="Thought of QUEUESORT"></a>Thought of QUEUESORT</h2><p>The method of this algorithm is to enqueue and dequeue for several time in certain order to implement the sort.</p>
<h2 id="Detail-Introduction"><a href="#Detail-Introduction" class="headerlink" title="Detail Introduction"></a>Detail Introduction</h2><p>Data Preparation:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//use to store the numbers</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//use to store numbers that need to be sorted</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>STEP 1:<br>We need to find the number which obtains the maximum number of bits.Then we use mBit to store this information.<br>In this step,we can get this information during the input procedure.</p>
<p>STEP 2:<br>We do a loop from 1 to mDigits.Each time we push the number that in nums to certain queue in Q.The ‘certain’ means the number on certain bit of the number.<br>For EXAMPLE: 123.<br>The first time: Because the number on the first digit of 123 is 3,we push it to Q[3];<br>The second time: Because the number on the second digit of 123 is 2,we push it to Q[2];<br>The third time: Because the number on the third bit of 123 is 1,we push it to Q[1];<br>if it isn’t the number who obtains the maximum number of digit.There will be a fourth time.But 123 doesn’t have the fourth bit,so we push it to Q[0].<br>Then:<br>We scan from Q[0] to Q[9] and add all number back to nums. Then go to the second loop.</p>
<p>TestData:<br>4<br>123 132 321 1<br>FirstTime:<br>Nums:123 132 321 1<br>Queue0:NULL<br>Queue1:321 1<br>Queue2:132<br>Queue3:123<br>…(Other queues do not have element)</p>
<p>SecondTime:<br>Nums:321 1 132 123<br>Queue0:1<br>Queue1:321<br>Queue2:123<br>Queue3:132</p>
<p>ThirdTime:<br>Nums:1 321 123 132<br>Queue0:1<br>Queue1:123 132<br>Queue2:NULL<br>Queue3:321</p>
<p>Sort Complete:Nums 1 123 132 321</p>
<h2 id="Algorithm-Complexity"><a href="#Algorithm-Complexity" class="headerlink" title="Algorithm Complexity"></a>Algorithm Complexity</h2><p>Apparently,the complexity is related to the max length of the maximum number.So the worst complexity is O(9<em>N^2)-&gt;All number is the same.And the average complexity is $\theta$(9</em>N*logN).<br>The advantage of this algorithm is that it ignores the discrete degree of the number.But if the value of the difference the number of bits of maximum number and the minimum number is very bit and there are few numbers in the sequence,this algorithm is not that efficient.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">define</span> INF 0xfffffffff;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> Lovelive<span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span>Lovelive<span class="token operator">></span> Q<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span>Lovelive<span class="token operator">></span> nums<span class="token punctuation">;</span>
Lovelive ts<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Lovelive N<span class="token punctuation">;</span>

Lovelive mbit<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>Lovelive a<span class="token punctuation">,</span>Lovelive b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">getBit</span><span class="token punctuation">(</span>Lovelive aa<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">{</span>
        aa<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
        mbit<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Lovelive <span class="token function">power</span><span class="token punctuation">(</span>Lovelive x<span class="token punctuation">,</span>Lovelive n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
            x<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Lovelive result<span class="token operator">=</span>x<span class="token punctuation">;</span>
    n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        x<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
            result<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> Lovelive <span class="token function">getIdx</span><span class="token punctuation">(</span>Lovelive n<span class="token punctuation">,</span>Lovelive time<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Lovelive mod <span class="token operator">=</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">10</span><span class="token operator">&lt;</span>mod<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Lovelive num<span class="token operator">=</span>n<span class="token operator">%</span>mod<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>Lovelive i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mbit<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Step %lld.\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            Lovelive tp<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Q<span class="token punctuation">[</span><span class="token function">getIdx</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Lovelive j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Queue%lld:\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                queue<span class="token operator">&lt;</span>Lovelive<span class="token operator">></span> tmps<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    tmps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Queue%lld:"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>tmps<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>tmps<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmps<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tmps<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>N<span class="token punctuation">;</span>
    Lovelive maxNumber<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1000000000</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>Lovelive i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Lovelive tp<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxNumber<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxNumber<span class="token punctuation">,</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">getBit</span><span class="token punctuation">(</span>maxNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CODEVS1094 FBI Tree]]></title>
      <url>/2016/07/01/CODEVS1094-FBI-Tree/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://codevs.cn/problem/1094/" target="_blank" rel="external">FBI Tree</a><br>Here is a definition:Strings which only contains ‘1’ is called I char-sequence;Strings which only contains ‘0’ is called ‘B’ char-sequence;Strings which contains both ‘1’ and ‘0’ is called ‘F’ char-sequence.Now,give out a 0-1 sequence ‘S’ which means there is only 1 and 0 in this sequence with the length of 2N,and give a rule of building a tree:<br>(1)T is the root node of the tree contains the sequence whose content is the same as ‘S’;<br>(2)If the length of the sequence is greater than 1,break the left half(S1) and right half(S2) to create left child and right child.<br>After building the tree,you need to return the Post-Traverse of types of nodes of the tree.<br>SAMPLE INPUT:<br>3<br>10001011<br>SAMPLE OUTPUT:<br>IBFBBBFIBFIIIFF</p>
</blockquote>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Actually it isn’t a hard work.We just follow the description and build up the tree.And figure out the type of the node when traversing.<br>We can simply use recursive algorithm to build up the tree.(Shows in AC CODE)</p>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><p>Time Consumption:AVERAGE 1.5ms</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> ls(x) x&lt;&lt;1</span>
<span class="token macro property">#<span class="token directive keyword">define</span> rs(x) (x&lt;&lt;1)+1</span>

string tree<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> N<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">judge</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">bool</span> have1<span class="token punctuation">,</span>have0<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    have1<span class="token operator">=</span>have0<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span> have1<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> have0<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>have0 <span class="token operator">&amp;&amp;</span> have1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>have1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">post</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">post</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cin<span class="token operator">>></span>N<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">post</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Tree Structure </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> CodeVs </tag>
            
            <tag> NOIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LuoguOJ P1803 Messy yyy]]></title>
      <url>/2016/06/21/LuoguOJ-P1803-Messy-yyy/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://www.luogu.org/problem/show?pid=1803" target="_blank" rel="external">Messt-yyy</a></p>
</blockquote>
<p>NOIp contest is comming,yyy is busy participating in contests.Because yyy is not a bully IOer,he can only take part in one contest at the same moment.<br>Now give you his contest schedule and yyy wants you to figure out how many contests which he listed on the schedule he can participate in at most.<br>Sample Input:<br>3<br>0 2<br>2 4<br>1 3</p>
<p>Sample Output:<br>2</p>
<blockquote>
<p>Explanation:He can take part in the first contest and the second.</p>
</blockquote>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Though this problem can be solved by using greedy strategy,I strongly recommend the DP Solution.<br>Provide S[i] stands for the ending moment of contest who ends at the ith moment. Obviously,the bigger P[i] is better.Then we can get the transitional function:<br>$$F[i]=max(F[i-1],F[P[i]]) (if P[i]!=FLAG)$$<br>$$F[i]=F[i-1] (if P[i]==FLAG)$$</p>
<blockquote>
<p>Explanation:the first function shows that if there is a contest starts at P[i] and ends at i,we compare wether we choose the previous contest can get a grater answer.<br>The Second function shows that if there isn’t any contest starts at P[i],we pass a previous value to current one.</p>
</blockquote>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><p>Time Consumption:Unknown(Less than 1000ms)</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1000001</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> st<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> maxIn<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> s<span class="token punctuation">,</span>e<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        st<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max1</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxIn<span class="token operator">=</span><span class="token function">max1</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>maxIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>maxIn<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max1</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token function">max1</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA10048 Audiophobia]]></title>
      <url>/2016/06/19/UVA10048-Audiophobia/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=22156" target="_blank" rel="external">Audiophobia</a></p>
</blockquote>
<p><img src="/2016/06/19/UVA10048-Audiophobia/Prob.jpg" alt="Problem Description"></p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>This is a variant of shortest path problem.The goal of this problem is to find a path whose   maximum value is the minimum value of all maximum values in each paths.It’s a hard thing to make it clear.You can comprehend it in the Problem Description section.<br>So how can we solve this problem?According to the problem description,there are several queries,so it is impossible to do an online work,we need an offline algorithm that can figure out all answers in the graph.Floyd is a good choice,but we need alter a little bit of it.<br>Cuz we need to find the maximum value of that path,we cannot use orthodox Floyd.We updating the value,we alter the original one to:</p>
<pre><code>if(G[i][j]==-1 || G[i][j]&gt;max(G[i][k],G[k][j]))
  G[i][j]=max(G[i][k],G[k][j]);
</code></pre><p>Then we can get the correct answer.</p>
<p>Tips:</p>
<ol>
<li>There is a empty line between each cases,if you ignore that,you will get PE.</li>
<li>When output answer,”Case” isn’t “CASE”</li>
</ol>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><p>Time Consumption:0ms</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> VCNT <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> TAG <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> C<span class="token punctuation">,</span>S<span class="token punctuation">,</span>Q<span class="token punctuation">;</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span>VCNT<span class="token punctuation">]</span><span class="token punctuation">[</span>VCNT<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span>
                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>TAG<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> CASE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"test.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">,</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>C <span class="token operator">||</span> S <span class="token operator">||</span> Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>CASE<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>S<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>d<span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c1<span class="token punctuation">,</span><span class="token operator">&amp;</span>c2<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>C<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span>TAG <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>TAG<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>TAG <span class="token operator">||</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token function">max2</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max2</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d\n"</span><span class="token punctuation">,</span>CASE<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>Q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span>TAG<span class="token punctuation">)</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no path\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Graph Theory </category>
            
            <category> Shortest Path </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> UVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA11491-Erasing and Winning]]></title>
      <url>/2016/06/19/UVA11491-Erasing-and-Winning/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=41975" target="_blank" rel="external">Erasing and Winning</a></p>
</blockquote>
<p><img src="/2016/06/19/UVA11491-Erasing-and-Winning/pic.png" alt="Problem Description"></p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Obviously,this problem can be solved by using greedy strategy.According to the problem description,we need to erase D numbers,which means there will be N-D numbers left at last.So we can consider to separate two situation to achieve greedy strategy.</p>
<blockquote>
<p>Definition<br>N:A number of N digits<br>D:Total digits that have to be erased<br>i:the $i^th$ number in the input<br>K:The amount of the number that we reserve</p>
</blockquote>
<p>The first situation is<br>$$K+(N-i)&gt;N-D$$<br>Which means after adding rest digits of certain sequence there will be redundant digits in the answer.In this case,we need to replace a digit that has been added in previous operation.</p>
<p>The second situation is<br>$$K+(N-i)&lt;N-D$$<br>In this case,we just need to add the rest digits directly in to the tail of the answer.</p>
<p>But All operation need to follow a rule:<br>$$K&lt;N-D$$</p>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><p>Time Consumption:0ms</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
using namespace std;

int main(){
    int n,d;
    while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;d) &amp;&amp; n &amp;&amp; d){
        char a[10010];
        getchar();
        int k=0;
        a[0]=&#39;0&#39;;
        for(int i=0;i&lt;n;i++){
            char c=getchar();
            while(k&gt;0 &amp;&amp; k+(n-i)&gt;n-d &amp;&amp; a[k]&lt;c)
                k--;
            if(k&lt;n-d){
                a[++k]=c;
            }
        }
        a[++k]=&#39;\0&#39;;
        puts(a+1);
    }
    return 0;
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Greedy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> UVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA1210 Sum of Consecutive Prime Numbers]]></title>
      <url>/2016/06/19/UVA1210-Sum-of-Consecutive-Prime-Numbers/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=26054" target="_blank" rel="external">Sum of Consecutive Prime Numbers</a></p>
</blockquote>
<p><img src="/2016/06/19/UVA1210-Sum-of-Consecutive-Prime-Numbers/pic.png" alt="Problem Description"></p>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>Oh,Math,I love it…I saw lots of people deal this problem by pre-calculating…Isn’t that cheating??!I’m a good student,I won’t do in that way.Because the TL is 3000ms and the data range isn’t very big,using simulation is feasible.<br>My way is to try each prime number sequence from big(The biggest less than N) to small(2).Then we can get the answer.<br>There is one thing worth to pay attention:We must search from the greatest prime number that is less than N to 2 instead of N/2,because there is a special situation:there is a prime number greater than N/2 but the next greatest prime number less that one is less than N/2(One convincing example is 100=53+47,if you search from 49 you will get a WA).</p>
<blockquote>
<p>Tips:When judging Primes:<br>Evens aren’t primes,you can use n&amp;1==0 to judge wether n is even.If n is even,n&amp;1 is 0<br>When Optimizing the algorithm:<br>When searching,we can just search primes,which means we don’t use kk–(in the code) and we use kk=nextPrime(kk);</p>
</blockquote>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><p>Time Consumption:1620ms</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">isprime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">nextPrim</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    n<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isprime</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>
    <span class="token keyword">int</span> kk<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>
    <span class="token keyword">int</span> half<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        half<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        kk<span class="token operator">=</span><span class="token function">nextPrim</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isprime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>kk<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> zz<span class="token operator">=</span>kk<span class="token punctuation">;</span>
            sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            sum<span class="token operator">+</span><span class="token operator">=</span>zz<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">!=</span>n <span class="token operator">&amp;&amp;</span> sum<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">nextPrim</span><span class="token punctuation">(</span>zz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">;</span>
                zz<span class="token operator">=</span>t<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// printf("%d ",zz);</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// cout&lt;&lt;endl;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cnt<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            kk<span class="token operator">=</span><span class="token function">nextPrim</span><span class="token punctuation">(</span>kk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Alternative way(pre-calculating):</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;list&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
using namespace std;

vector&lt;int&gt; prime;
void init()
{
    int num[150000]= {0};
    for(int i=2; i*i&lt;10000+10; i++)
        for(int j=i*i; j&lt;10000+10; j+=i)
            num[j]=1;
    for(int i=2; i&lt;10000+10; i++)
        if(!num[i])
            prime.push_back(i);
}

int main()
{
    init();
    int x;
    while(cin&gt;&gt;x &amp;&amp; x)
    {
        int l=0, r=0, sum=prime[0];
        int ans=0;
        while(l&lt;=r &amp;&amp; prime[r]&lt;=x &amp;&amp; r&lt;prime.size())
        {
            if(sum==x)
            {
                ans++;
                sum-=prime[l++];
            }
            else if(sum&gt;x)
                sum-=prime[l++];
            else
                sum+=prime[++r];
        }
        cout&lt;&lt;ans&lt;&lt;endl;
    }
    return 0;
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Mathematics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Mathematics </tag>
            
            <tag> UVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA1218 Perfect Service]]></title>
      <url>/2016/06/18/UVA1218-Perfect-Service/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://acm.hust.edu.cn/vjudge/problem/viewProblem.action?id=36043" target="_blank" rel="external">Perfect Service</a></p>
</blockquote>
<p>A network is composed of N computers connected by N - 1 communication links such that any two computers can be communicated via a unique route. Two computers are said to be adjacent if there is a communication link between them. The neighbors of a computer is the set of computers which are adjacent to it. In order to quickly access and retrieve large amounts of information, we need to select some computers acting as servers to provide resources to their neighbors. Note that a server can serve all its neighbors. A set of servers in the network forms a perfect service if every client (non-server) is served by exactly one server. The problem is to find a minimum number of servers which forms a perfect service, and we call this number perfect service number.<br>We assume that N($\le$10000) is a positive integer and these N computers are numbered from 1 to N . For example, Figure 1 illustrates a network comprised of six computers, where black nodes represent servers and white nodes represent clients. In Figure 1(a), servers 3 and 5 do not form a perfect service because client 4 is adjacent to both servers 3 and 5 and thus it is served by two servers which contradicts the assumption. Conversely, servers 3 and 4 form a perfect service as shown in Figure 1(b). This set also has the minimum cardinality. Therefore, the perfect service number of this example equals two.<br><img src="/2016/06/18/UVA1218-Perfect-Service/pic.png" alt="Figure 1"><br>Your task is to write a program to compute the perfect service number.<br>Input<br>The input consists of a number of test cases. The format of each test case is as follows: The first line contains one positive integer, N , which represents the number of computers in the network. The next N - 1 lines contain all of the communication links and one line for each link. Each line is represented by two positive integers separated by a single space. Finally, a ‘0’ at the (N + 1) -th line indicates the end of the first test case.<br>The next test case starts after the previous ending symbol ‘0’. A ‘-1’ indicates the end of the whole inputs.<br>Output<br>The output contains one line for each test case. Each line contains a positive integer, which is the perfect service number.</p>
<blockquote>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>6<br>1 3<br>2 3<br>3 4<br>4 5<br>4 6<br>0<br>2<br>1 2<br>-1</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>2<br>1</p>
</blockquote>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>We see that there are N vertexes and N-1 edges,so those N vertexes can build up an unrooted tree.The brute force algorithm is to enumerate each status of each vertexes(Algorithms Complexity is O(2^N)).Apparently the complexity is too high to pass.So we can consider to use dynamic programming.Many people says that there are two state of each vertexes(dp[i][0] and dp[i][1]),but they are wrong cuz the limitation of the problem:a PC cannot be served by two Server.So we can use three state to deal with this problem.</p>
<blockquote>
<p>F[i][0]:$V_i$ is a server and each of its children an be ether server or PC.<br>F[i][1]:Both $V_i$ and its father isn’t server and at least one of its children is a server<br>F[i][2]:$V_i$ and its children are not server but its father is a server</p>
</blockquote>
<p>Then we can figure out three functions:<br>Function No.1</p>
<blockquote>
<p>F[i][0]=$min(F[j][0],F[j][2])+1$<br>Explanation:<br>We know that F[i][0] means $V_i$ is a server,so each its children can be ether a server or a PC,so we can use F[j][0] and F[j][2] to figure out which state of $V_i$’s child $V_j$ can achieve the best situation.In another word,we try both two possible state of $V_j$ to figure out the least number of server at present.</p>
</blockquote>
<p>Function No.2</p>
<blockquote>
<p>F[i][2]=$\Sigma F[j][1]$<br>Explanation:<br>In this case,$V_i$ is not a server and its children are not,ether.So there is only one possible state can be trans to F[i][2] is F[j][1].Cuz $V_i$’s father is a server,so $V_i$’s children cannot be servers,without this state,there is only one that is F[j][1] can be transed.</p>
</blockquote>
<p>Function No.2</p>
<blockquote>
<p>F[i][1]=$\Sigma min(F[i][2]-F[j][1]+F[j][0])$<br>Explanation:<br>This is a state that is a little bit more complex than other two.Cuz we only know there are or is a server in $V_i$’s children but we don’t know which situation can get the least number.So we need to attempt each two status of $V_j$.<br>Tip:F[i][2]=$\Sigma F[j][1]$</p>
</blockquote>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> N<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dps</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
    vis<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>MAXN<span class="token punctuation">;</span>dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">dps</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>g<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>dp<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> N<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>N<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tu<span class="token punctuation">,</span>tv<span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cin<span class="token operator">>></span>tu<span class="token operator">>></span>tv<span class="token punctuation">;</span>
            g<span class="token punctuation">[</span>tu<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">[</span>tv<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dps</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
            <tag> UVA </tag>
            
            <tag> Tree DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSK Contest 2016 TencentGame:Unicursal]]></title>
      <url>/2016/06/12/JSK-Contest-2016-TencentGame-1/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote>
<p>Problem URL:<a href="http://nanti.jisuanke.com/t/11153" target="_blank" rel="external">TencentGame:Unicursal</a></p>
</blockquote>
<p>Tencent has developed a new game:unicursal.Define an polygon operation:Connect each midpoint of each edge of a regular N-sided polygon to form a new N-sided polygon.Do this operation K times,then regard that graph as the initial graph.The edge in first layer of the graph is 100.<br>Players are asked to start from the first layer of the graph and then traverse the graph without encountering same vertexes(When n=4 and K=1,the graph and the path shows in Picture-1)<br><img src="/2016/06/12/JSK-Contest-2016-TencentGame-1/picture-1.png" alt="Picture-1"><br>Your mission is to count the maximum length of the path that player can drawn.</p>
<blockquote>
<p>The accuracy of the result cannot greater than 10e-3<br>The given case showed in the picture is 562.1320343</p>
</blockquote>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>This is the easiest problem of this contest I’v ever seen..It’s a pure math problem.You can figure out the degree of the angle of certain graph by calculating its quoins.And then use its quoins and cosine theorem to figure out the length of an edge of next layer.<br>The Formula is:</p>
<blockquote>
<p>$$\angle \theta = \pi - \frac{\pi}{N}$$</p>
<p>Length-&gt;inner = $\sqrt{2×L^2-2×L×L×cos\theta}$</p>
</blockquote>
<p>Note: PI = acos(-1)~~~</p>
<h2 id="AC-CODE"><a href="#AC-CODE" class="headerlink" title="AC CODE"></a>AC CODE</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">define</span> PI acos(-1)</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>
    <span class="token keyword">double</span> len<span class="token punctuation">;</span>cin<span class="token operator">>></span>len<span class="token punctuation">;</span>
    <span class="token keyword">double</span> theta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token number">-2.0</span><span class="token punctuation">)</span><span class="token operator">*</span>PI<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//cout&lt;&lt;theta&lt;&lt;endl;</span>
    <span class="token keyword">double</span> sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>
    sum<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">double</span> l<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        sum<span class="token operator">+</span><span class="token operator">=</span>l<span class="token punctuation">;</span>
        <span class="token keyword">double</span> INNER <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>l<span class="token operator">*</span>l<span class="token number">-2</span><span class="token operator">*</span>l<span class="token operator">*</span>l<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>INNER<span class="token punctuation">;</span>
        len<span class="token operator">=</span>INNER<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.7lf"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Mathematics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Simulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSK Contest 2016 WarmingUpContest AC Code]]></title>
      <url>/2016/06/09/JSK-Contest-2016-WarmingUpContest-ACCode/</url>
      <content type="html"><![CDATA[<h2 id="Problem-Descriptions"><a href="#Problem-Descriptions" class="headerlink" title="Problem Descriptions"></a>Problem Descriptions</h2><hr>
<p>A:<a href="http://nanti.jisuanke.com/t/11097" target="_blank" rel="external">Rotate TheCoin</a></p>
<p>B:<a href="http://nanti.jisuanke.com/t/11099" target="_blank" rel="external">Package Transporting</a></p>
<p>C:<a href="http://nanti.jisuanke.com/t/11112" target="_blank" rel="external">Building An Airport</a></p>
<p>D:<a href="http://nanti.jisuanke.com/t/11115" target="_blank" rel="external">The Lighten Point</a></p>
<h3 id="Categories-Of-Each-Problem"><a href="#Categories-Of-Each-Problem" class="headerlink" title="Categories Of Each Problem"></a>Categories Of Each Problem</h3><table>
<thead>
<tr>
<th>Question</th>
<th style="text-align:center">Categories</th>
<th style="text-align:right">Hard Level(0~10)</th>
</tr>
</thead>
<tbody>
<tr>
<td>RotateTheCoin</td>
<td style="text-align:center">BitCalculation</td>
<td style="text-align:right">7</td>
</tr>
<tr>
<td>PackageTransporting</td>
<td style="text-align:center">Offline UnionFind</td>
<td style="text-align:right">7.5</td>
</tr>
<tr>
<td>BuildingAnAirport</td>
<td style="text-align:center">NetWorkFlow</td>
<td style="text-align:right">8</td>
</tr>
<tr>
<td>TheLightenPoint</td>
<td style="text-align:center">Geometric</td>
<td style="text-align:right">9.4</td>
</tr>
</tbody>
</table>
<h1 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h1><h2 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h2><p>This question isn’t that easy because of its data range..If it had a narrower data range,I could pass every test point TAT. Anyway,you just need to enumerate the status of the first line,then you can know the status of following lines(1 stands for front,0 stands for back).So you just need to enumerate the first line….And use an O(2^20) algorithm to search out all status.</p>
<h3 id="AC-Code-for-Question-A"><a href="#AC-Code-for-Question-A" class="headerlink" title="AC Code for Question A"></a>AC Code for Question A</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> he<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cun<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">65535</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        s<span class="token operator">=</span>i<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>
                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            s<span class="token operator">/</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>he<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                he<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>s<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mi<span class="token punctuation">,</span>zhi<span class="token punctuation">,</span>an<span class="token punctuation">;</span>
        mi<span class="token operator">=</span><span class="token number">1000000000</span><span class="token punctuation">;</span>
        zhi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> neng<span class="token punctuation">;</span>
        neng<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            zhi<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            cun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>he<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">%</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>cun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token operator">%</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>cun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cun<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>he<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">^</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                zhi<span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>cun<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                an<span class="token operator">=</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>cun<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                cun<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>cun<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">^</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cun<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>he<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cun<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>an<span class="token operator">*</span><span class="token number">2</span><span class="token operator">%</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>cun<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cun<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>an<span class="token operator">/</span><span class="token number">2</span><span class="token operator">%</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>cun<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cun<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>zhi<span class="token operator">&lt;</span>mi<span class="token punctuation">)</span><span class="token punctuation">{</span>
                mi<span class="token operator">=</span>zhi<span class="token punctuation">;</span>
                neng<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>neng<span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B"></a>Problem B</h2><p>Lots of participants said Problem B is a piece of cake…Well really easy(Because it is the only problem that I get full score…).U just need to use an Offline Union find to store connected points.And check out them in each query.It is really easy to handle…</p>
<h3 id="AC-Code-For-Question-B"><a href="#AC-Code-For-Question-B" class="headerlink" title="AC Code For Question B"></a>AC Code For Question B</h3><pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
using namespace std;

#define MaxN 10005
#define MaxM 50005

struct node
{
    int x , y , len;
}a[MaxM];
int UF[MaxN];
int P[MaxN];
int f[MaxM];
int n , m , q;

int cmp(const node&amp;,const node&amp;);
int Find(int);
int binarysearch(int);

int main()
{

    while (scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;q)!=EOF)
    {
        memset(P,0,sizeof(P));
        for (int i=0;i&lt;=n;i++) UF[i] = i;

        for (int i=1;i&lt;=m;i++)
            scanf(&quot;%d%d%d&quot;,&amp;a[i].x,&amp;a[i].y,&amp;a[i].len);

        a[0].len = 0;
        a[m+1].len = 0x3fffffff;
        sort(a+1,a+m+1,cmp);
        for (int i=0;i&lt;=n;i++)
            P[i] = 1;

        for (int i=1;i&lt;=m;i++)
        {
            f[i] = f[i-1];
            if (Find(a[i].x)!=Find(a[i].y))
            {
                f[i] += P[Find(a[i].x)]*P[Find(a[i].y)];
                P[Find(a[i].x)] += P[Find(a[i].y)];
                UF[Find(a[i].y)] = Find(a[i].x);
            }
        }
        f[m+1] = 0x3fffffff;

        for (int i=0;i&lt;q;i++)
        {
            int tmp;
            scanf(&quot;%d&quot;,&amp;tmp);
            printf(&quot;%d\n&quot;,f[binarysearch(tmp)]);
        }
    }
    return    0;
}

int cmp(const node&amp;a,const node&amp;b)
{
    return a.len&lt;b.len;
}

int Find(int x)
{
    if (UF[x] != x)
        UF[x] = Find(UF[x]);
    return    UF[x];
}

int binarysearch(int x)
{
    int s = 0;
    int t = m;
    int ret = (s+t)&gt;&gt;1;

    while (!(a[ret].len&lt;=x&amp;&amp;x&lt;a[ret+1].len))
    {
        if (a[ret].len&gt;x)
            t = ret-1;
        else
            s = ret+1;
        ret = (s+t)&gt;&gt;1;
    }
    return    ret;
}
</code></pre><h2 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C"></a>Problem C</h2><p>This is a classic problem in NetWorkFlow section…The MaxFlow problem.I tried to used ISAP to solve this problem but I failed because the data range was too large….I’ll show the AC Code for this problem.</p>
<p>Actually This problem was hard enough to drag my speed during the contest 233333.</p>
<h3 id="AC-Code-For-Problem-C"><a href="#AC-Code-For-Problem-C" class="headerlink" title="AC Code For Problem C"></a>AC Code For Problem C</h3><pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;algorithm&gt;

using namespace std;

#define min(a,b) a&lt;b?a:b

const int maxnode = 101000 + 5;
const int maxedge = 1010000 + 5;
const int oo = 10000000;

int node, src, dest, nedge;
int head[maxnode], dist[maxnode], Q[maxnode], work[maxnode];
int  point[maxedge], Ne[maxedge], flow[maxedge], capa[maxedge];

void init(int _node, int _src, int _dest) {
    node = _node;
    src = _src;
    dest = _dest;
    for (int i = 0; i &lt; node; i++) head[i] = -1;
    nedge = 0;
}

void addedge(int u, int v, int c1, int c2) {
    point[nedge] = v, capa[nedge] = c1, flow[nedge] = 0, Ne[nedge] = head[u], head[u] = (nedge++);
    point[nedge] = u, capa[nedge] = c2, flow[nedge] = 0, Ne[nedge] = head[v], head[v] = (nedge++);
}

bool dinic_bfs() {
    memset(dist, 255, sizeof (dist));
    dist[src] = 0;
    int sizeQ = 0;
    Q[sizeQ++] = src;
    for (int cl = 0; cl &lt; sizeQ; cl++)
        for (int k = Q[cl], i = head[k]; i &gt;= 0; i = Ne[i])
            if (flow[i] &lt; capa[i] &amp;&amp; dist[point[i]] &lt; 0) {
                dist[point[i]] = dist[k] + 1;
                Q[sizeQ++] = point[i];
            }
    return dist[dest] &gt;= 0;
}

int dinic_dfs(int x, int exp) {
    if (x == dest) return exp;
    for (int &amp;i = work[x]; i &gt;= 0; i = Ne[i]) {
        int v = point[i], tmp;
        if (flow[i] &lt; capa[i] &amp;&amp; dist[v] == dist[x] + 1 &amp;&amp; (tmp = dinic_dfs(v, min(exp, capa[i] - flow[i]))) &gt; 0) {
            flow[i] += tmp;
            flow[i^1] -= tmp;
            return tmp;
        }
    }
    return 0;
}

int dinic_flow() {
    int result = 0;
    while (dinic_bfs()) {
        for (int i = 0; i &lt; node; i++) work[i] = head[i];
        while (1) {
            int delta = dinic_dfs(src, oo);
            if (delta == 0) break;
            result += delta;
        }
    }
    return result;
}

int main() {
    int n,m;
    while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF){
    int sum=0,t;
    init(n+m+2,n+m,n+m+1);
    for (int i=0;i&lt;n;i++) {
        scanf(&quot;%d&quot;,&amp;t);
        addedge(n+m,i,t,0);
    }
    int a,b,c;
    for (int i=0;i&lt;m;i++) {
        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);
        a--,b--;
        sum+=c;
        addedge(a,i+n,oo,0);
        addedge(b,i+n,oo,0);
        addedge(i+n,n+m+1,c,0);
    }
    printf(&quot;%d\n&quot;,sum-dinic_flow());
    }
    return 0;
}
</code></pre><h1 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D"></a>Problem D</h1><p>Oh,my god.Geometric isn’t my strong suit.I didn’t solve this problem..I should say sorry…I’v not learnt that section…I’ll just give out the solution.</p>
<h3 id="AC-Code-For-Question-D"><a href="#AC-Code-For-Question-D" class="headerlink" title="AC Code For Question D"></a>AC Code For Question D</h3><pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;string.h&gt;
#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
using namespace std;

#define MAXN 110
#define EPS 1e-8

typedef long long llint;

double transformMat[4][4];

struct point3D{
    double x,y,z;
    point3D():x(0.0),y(0.0),z(0.0){;}
    point3D(double xx,double yy,double zz):x(xx),y(yy),z(zz){;}
    point3D operator +(const point3D &amp;p)
    {
        point3D resP(x+p.x,y+p.y,z+p.z);
        return resP;
    }
    point3D operator -(const point3D &amp;p)
    {
        point3D resP(x-p.x,y-p.y,z-p.z);
        return resP;
    }
    point3D operator *(const double &amp;lamda)
    {
        point3D resP(x*lamda,y*lamda,z*lamda);
        return resP;
    }
    double dot(const point3D &amp;p)
    {
        return x*p.x+y*p.y+z*p.z;
    }
    point3D cross(const point3D &amp;p)
    {
        point3D resP;
        resP.x=y*p.z-z*p.y;
        resP.y=z*p.x-x*p.z;
        resP.z=x*p.y-y*p.x;
        return resP;
    }
    double mag()
    {
        return sqrt(x*x+y*y+z*z);
    }
    void normalize()
    {
        double m=mag();
        x/=m;
        y/=m;
        z/=m;
    }
};

typedef point3D vec3D;

struct plane{
    double a,b,c,d;
    void init()
    {
        double mag=vec3D(a,b,c).mag();
        a/=mag;
        b/=mag;
        c/=mag;
        d/=mag;
    }
};

void multMat(double MA[][4],double MB[][4])
{
    double MR[4][4];
    for(int i=0;i&lt;4;i++)
    {
        for(int j=0;j&lt;4;j++)
            MR[i][j]=0.0;
    }

    for(int i=0;i&lt;4;i++)
    {
        for(int j=0;j&lt;4;j++)
        {
            for(int k=0;k&lt;4;k++)
                MR[i][j]+=MA[i][k]*MB[k][j];
        }
    }
    memcpy(MB,MR,sizeof(MR));
}

void loadIdentity(double mat[][4])
{
    for(int i=0;i&lt;4;i++)
    {
        mat[i][i]=1.0;
        for(int j=0;j&lt;4;j++)
        {
            if(i==j)continue;
            mat[i][j]=0.0;
        }
    }
}

void translate(double tx,double ty,double tz)
{
    double tmpMat[4][4];
    loadIdentity(tmpMat);
    tmpMat[0][3]=tx;
    tmpMat[1][3]=ty;
    tmpMat[2][3]=tz;
    multMat(tmpMat,transformMat);
}

void rotate(double theta,double vx,double vy,double vz)
{
    double tmpMat[4][4];
    double cosTheta2=cos(theta/2.0),sinTheta2=sin(theta/2.0);
    tmpMat[0][0]=1.0-2.0*(vy*vy+vz*vz)*sinTheta2*sinTheta2;
    tmpMat[1][0]=2.0*vx*vy*sinTheta2*sinTheta2+2.0*vz*cosTheta2*sinTheta2;
    tmpMat[2][0]=2.0*vx*vz*sinTheta2*sinTheta2-2.0*vy*cosTheta2*sinTheta2;
    tmpMat[3][0]=0.0;

    tmpMat[0][1]=2.0*vx*vy*sinTheta2*sinTheta2-2.0*vz*cosTheta2*sinTheta2;
    tmpMat[1][1]=1.0-2.0*(vx*vx+vz*vz)*sinTheta2*sinTheta2;
    tmpMat[2][1]=2.0*vy*vz*sinTheta2*sinTheta2+2.0*vx*cosTheta2*sinTheta2;
    tmpMat[3][1]=0.0;

    tmpMat[0][2]=2.0*vx*vz*sinTheta2*sinTheta2+2.0*vy*cosTheta2*sinTheta2;
    tmpMat[1][2]=2.0*vy*vz*sinTheta2*sinTheta2-2.0*vx*cosTheta2*sinTheta2;
    tmpMat[2][2]=1.0-2.0*(vx*vx+vy*vy)*sinTheta2*sinTheta2;
    tmpMat[3][2]=0.0;

    tmpMat[0][3]=tmpMat[1][3]=tmpMat[2][3]=0.0;
    tmpMat[3][3]=1.0;

    multMat(tmpMat,transformMat);
}

int n,m;
plane P;
double a,b,c,d;
point3D S[MAXN],R[MAXN];
point3D C[MAXN];
point3D O;
point3D bp;
bool isEqualD(double d1,double d2)
{
    return fabs(d1-d2)&lt;EPS;
}

void transform(double trMat[][4],point3D &amp;p)
{
    point3D resP;
    resP.x=trMat[0][0]*p.x+trMat[0][1]*p.y+trMat[0][2]*p.z+trMat[0][3];
    resP.y=trMat[1][0]*p.x+trMat[1][1]*p.y+trMat[1][2]*p.z+trMat[1][3];
    resP.z=trMat[2][0]*p.x+trMat[2][1]*p.y+trMat[2][2]*p.z+trMat[2][3];
    p=resP;
}

bool isInter(point3D o,point3D s,double &amp;lamda)
{
    vec3D tv=s-o;
    if(isEqualD(tv.z,0.0))
        return false;
    lamda=-(o.z/tv.z);
    return lamda&gt;EPS;
}

double cross(point3D p1,point3D p2,point3D p3)
{
    double res=0.0;
    return (p2-p1).x*(p3-p1).y-(p2-p1).y*(p3-p1).x;
}


bool cmp(point3D p1,point3D p2)
{
    llint kross=cross(bp,p1,p2);
    if(kross==0)
        return (p1-bp).mag()&lt;(p2-bp).mag();
    return kross&gt;0;
}

int GrahamScan(point3D *pts,int n)
{
    int i,j,k;
    llint u,v;
    for(i=0,k=0;i&lt;n;i++)
    {
        u=pts[i].x-pts[k].x;
        v=pts[i].y-pts[k].y;
        if((u&lt;0)||(u==0&amp;&amp;v&lt;0))k=i;
    }
    bp=pts[k];
    sort(pts,pts+n,cmp);
    pts[n]=pts[0];
    for(i=1,j=2;j&lt;n;j++)
    {
        while(i&gt;0&amp;&amp;cross(pts[i-1],pts[i],pts[j])&lt;=0)
            i--;
        pts[++i]=pts[j];
    }
    return i+1;
}

bool isInPolygon(point3D *pts,int n,point3D p)
{
    for(int i=0;i&lt;n;i++)
    {
        if(cross(pts[i],pts[(i+1)%n],p)&lt;EPS)
        {
            return false;
        }
    }
    return true;
}

int main()
{
    int ta,tb,tc,td;
    while(scanf(&quot;%d %d %d %d&quot;,&amp;ta,&amp;tb,&amp;tc,&amp;td),!(!ta&amp;&amp;!tb&amp;&amp;!tc&amp;&amp;!td))
    {
        P.a=ta,P.b=tb,P.c=tc,P.d=td;
        P.init();
        scanf(&quot;%d&quot;,&amp;n);
        for(int i=0;i&lt;n;i++)
            scanf(&quot;%lf %lf %lf&quot;,&amp;S[i].x,&amp;S[i].y,&amp;S[i].z);

        scanf(&quot;%lf %lf %lf&quot;,&amp;O.x,&amp;O.y,&amp;O.z);

        scanf(&quot;%d&quot;,&amp;m);
        for(int i=0;i&lt;m;i++)
            scanf(&quot;%lf %lf %lf&quot;,&amp;R[i].x,&amp;R[i].y,&amp;R[i].z);

        loadIdentity(transformMat);
        translate(-P.a*P.d,-P.b*P.d,-P.c*P.d);
        vec3D tmpV=vec3D(P.a,P.b,P.c).cross(vec3D(0.0,0.0,1.0));
        double cosTheta=vec3D(P.a,P.b,P.c).dot(vec3D(0.0,0.0,1.0));
        if(!isEqualD(fabs(cosTheta),1.0))
        {
            tmpV.normalize();
            rotate(acos(cosTheta),tmpV.x,tmpV.y,tmpV.z);
        }

        for (int i=0;i&lt;n;i++)
        {
            transform(transformMat,S[i]);
        }
        transform(transformMat,O);

        for(int i=0;i&lt;m;i++)
        {
            transform(transformMat,R[i]);
        }
        int cnt=0;
        for(int i=0;i&lt;n;i++)
        {
            double lamda;
            if(isInter(O,S[i],lamda))
            {
                C[cnt++]=O+(S[i]-O)*lamda;
            }
        }

        if(cnt==0)
        {
            printf(&quot;ZERO\n&quot;);
            continue;
        }
        else if(cnt!=n)
        {
            printf(&quot;INF\n&quot;);
            continue;
        }
        else
        {
            cnt=GrahamScan(C,cnt);
            int ans=0;
            for(int i=0;i&lt;m;i++)
            {
                double lamda;
                if(!isInter(O,R[i],lamda))
                    continue;
                R[i]=O+(R[i]-O)*lamda;
                if(isInPolygon(C,cnt,R[i]))
                {
                    ans++;
                }
            }
            printf(&quot;%.2lf%%\n&quot;,(double)ans/m*100);
            continue;
        }

    }

    return 0;
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Contest-2016 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> ACM </tag>
            
            <tag> JiSuanKe </tag>
            
            <tag> Contest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Concerto for violin and orchestra in e minor, Op.64 By AD1024]]></title>
      <url>/2016/06/09/Concerto-for-violin-and-orchestra-in-e-minor-Op-64-By-AD1024/</url>
      <content type="html"><![CDATA[<p>This is my work which took part in the “Western Instrument Contest” held by Bilibili in April,2016. And won the “Great Post” Prize.</p>
<div class="bili_video"><embed height="422" width="650" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=4179299&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></div>
]]></content>
      
        <categories>
            
            <category> Violin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LuoguOJ-P1226-FastPower||Mod]]></title>
      <url>/2016/06/06/LuoguOJ-P1226-FastPower-Mod/</url>
      <content type="html"><![CDATA[<p>Problem URL:<a href="http://www.luogu.org/problem/show?pid=1226" target="_blank" rel="external">FastPower||Mod</a></p>
<blockquote>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description:"></a>Problem Description:</h2><p>Given 3 numbers a,b,c.Output the result of (a^b)%c.<br>Note:b*b less than the maximum of long long.</p>
</blockquote>
<h2 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis"></a>Problem Analysis</h2><p>The is a basic algorithm that every OIer should be familiar with..Fast power,it has been introduced in details in Wiki and BaiduWiki(Not recommended).Here is an application of this algorithm.And we also need to pay attention to the calculating order of ‘mod’.<br>The calculating rule shows below:</p>
<blockquote>
<p>(a + b) % p = (a % p + b % p) % p<br>(a - b) % p = (a % p - b % p) % p<br>(a <em> b) % p = (a % p </em> b % p) % p<br>(a^b) % p = ((a % p)^b) % p</p>
</blockquote>
<p>I’ll trans-introduce this point in other post.</p>
<h2 id="Source-Code-Answer"><a href="#Source-Code-Answer" class="headerlink" title="Source Code(Answer):"></a>Source Code(Answer):</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span>

<span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">power1</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span>ll c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>c<span class="token punctuation">;</span>
        a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>c<span class="token punctuation">;</span>
        b<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">'^'</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" mod "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">'='</span><span class="token operator">&lt;&lt;</span><span class="token function">power1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Divide And Conquer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NOIP </tag>
            
            <tag> Mathematics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LuoguOJ--P1101--WordsMatrix]]></title>
      <url>/2016/06/06/LuoguOJ-P1101-WordsMatrix/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Problem URL:<a href="http://www.luogu.org/problem/show?pid=1101" target="_blank" rel="external">Words Matrix</a></p>
<blockquote>
<h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description:"></a>Problem Description:</h3><p>Give an N*N matrix contains characters(a-z).You are asked to find word ‘yizhong’ in two diagonal and each lines and columns.For example(输入 means input | 输出 means output):<br><img src="/2016/06/06/LuoguOJ-P1101-WordsMatrix/sample.png" alt="Sample Input and output"></p>
</blockquote>
</blockquote>
<h3 id="Problem-Analysis"><a href="#Problem-Analysis" class="headerlink" title="Problem Analysis:"></a>Problem Analysis:</h3><p>It is an obvious DFS problem,but we can solve it with out using DFS(Magic!!!).My idea of solving this problem is use char double demential array g[MAXN][MAXN] to store the given matrix.Then first,to traverse the matrix,if g[i][j] is ‘y’,then search eight directions surround g[i]<a href="up down,left right,up left,upright and down left,down right">j</a>,if there is ‘i’ then,run search from the bit where i stored. Definitely,searching function will follow the corresponding direction.</p>
<h3 id="Codes-shows-blow"><a href="#Codes-shows-blow" class="headerlink" title="Codes shows blow:"></a>Codes shows blow:</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>      
<span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
  a<span class="token operator">=</span>x<span class="token punctuation">;</span>b<span class="token operator">=</span>y<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">++</span>flag<span class="token punctuation">;</span>
        x<span class="token operator">+</span><span class="token operator">=</span>dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        y<span class="token operator">+</span><span class="token operator">=</span>dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      vis<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
      a<span class="token operator">+</span><span class="token operator">=</span>dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      b<span class="token operator">+</span><span class="token operator">=</span>dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">char</span> t <span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token string">'*'</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Search-Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
            <tag> LuoguOJ </tag>
            
            <tag> Optimized Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeVs-P1220-Triangle]]></title>
      <url>/2016/06/06/CodeVs-P1220-Triangle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Problem URL:<a href="http://codevs.cn/problem/1220/" target="_blank" rel="external">Number Triangle</a></p>
<blockquote>
<p>Problem Description:<br>  <img src="/2016/06/06/CodeVs-P1220-Triangle/1220.gif" alt="ProblemPicture"><br>  Given a Triangle built up with numbers,you can move between numbers where there is an edge between them.And the weight of a move is the sum of two numbers.Now you need to find a way move from the top to the bottom that the weight is the maximum of all ways.<br>  (The Given picture’s maximum weight is 27-&gt; 7+3+8+7+2)</p>
</blockquote>
</blockquote>
<p>This is a classic DP problem.Also it is a appropriate DP for elementary learner.</p>
<p>First we need to transform the input data in order to make judging borders easier.So how to transform?<br>The given triangle is:</p>
<blockquote>
<pre><code>          1
        2   3
      4   5   6
    7   8   9  10
</code></pre></blockquote>
<p>And After transform:</p>
<blockquote>
<pre><code>    1
    2 3
    4 5 6
    7 8 9 10
</code></pre></blockquote>
<p>Then We can instantly know the transitional function。<br>The traditional function obviously is:</p>
<blockquote>
<p>F[i,j]=max(F[i,j]+F[i-1][j],F[i,j]+F[i-1][j-1]);</p>
</blockquote>
<p>Ok,Talk is really cheap.The Source code is below:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//f[i,j]=max(f[i-1,j]+f[i,j],f[i-1,j+1]+f[i,j]);</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        maxn<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span>g<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>maxn<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> CodeVs </tag>
            
            <tag> Graph DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Image Intensity Identifier]]></title>
      <url>/2016/06/05/Image-Intensity-Identifier/</url>
      <content type="html"><![CDATA[<p>When I was developing the client of Shiyiquan,I met a problem that need to use an algorithm to identify wether the picture is mainly light color.Today let’s talk about something about that.<br>To identify the intensity,we need firstly grey the image.In Android,the information of an image can be sorted in a bitmap object.We can use getPixel(int x,int y) to get each color in each pixels.</p>
<p>Then we need to get the RGB info of each pixels:</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> rgb <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPixel</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>rgb <span class="token operator">&amp;</span> <span class="token number">0xff0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>rgb <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>rgb <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>Then,we use those three values to calculate the grey value of certain pixel:</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> gray <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token number">0.3</span> <span class="token operator">+</span> g <span class="token operator">*</span> <span class="token number">0.59</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">0.11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sgray<span class="token punctuation">[</span>gray<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>What does sgray[] do?It is used to count times that each gray value appears.Then we use Gaussian Distribution to figure out the distribution of those gray value.</p>
<blockquote>
<p>In several experiments,if the distribution value is greater than approximately 420.35,it is deep color,or it is a light color image.</p>
</blockquote>
<p>The Full Method is:</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDeepColor</span><span class="token punctuation">(</span>Bitmap bi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sgray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sgray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> width <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> height <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> rgb <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPixel</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>rgb <span class="token operator">&amp;</span> <span class="token number">0xff0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>rgb <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>rgb <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> gray <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token number">0.3</span> <span class="token operator">+</span> g <span class="token operator">*</span> <span class="token number">0.59</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">0.11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sgray<span class="token punctuation">[</span>gray<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sgray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">double</span> p <span class="token operator">=</span> sgray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>width <span class="token operator">*</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum <span class="token operator">+=</span> p <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        sum <span class="token operator">*=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        Log.i("ImageToolCalc:", Double.toString(sum));</span>
        <span class="token keyword">return</span> sum <span class="token operator">>=</span> <span class="token number">420</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithms </tag>
            
            <tag> ImageRelated </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSK-JokeOfMessing]]></title>
      <url>/2016/06/05/JSK-JokeOfMessing/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Problem URL:<a href="http://nanti.jisuanke.com/t/424" target="_blank" rel="external">JSK-JokeOfMessing</a></p>
<blockquote>
<p>Problem Description:<br>Add space in a sequence of number,make each independent part can be 1 2 3 … n but it is not required to sort the sequence.<br>    For example:4111109876532<br>    after the process:4 1 11 10 9 8 7 6 5 3 2</p>
</blockquote>
</blockquote>
<p>This problem is a simple-dfs problem.Because we can use the length of the sequence to figure out the maximum number in the processed sequence.The formula is:</p>
<blockquote>
<p>Max Num = (A.length-9)/2+9 if(A.length&gt;9)<br>         = A.length if(A.length&lt;=9)</p>
</blockquote>
<p>Apparently this is the key to the problem.Then we just need to enum the bit of numbers from low to high.In this case,there is a little optimization.The problem only require one possible solution,so we can add an flag to identify wether the answer has been figured out.</p>
<p>Source Code(C++):</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> flag<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>len<span class="token punctuation">;</span>
<span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> dt<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//this function is used to judge wether the answer is valid.</span>
    <span class="token keyword">bool</span> judge<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>judge<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>judge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        judge<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>judge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span>len<span class="token operator">-</span>pos<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">>=</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>n <span class="token operator">&amp;&amp;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//Judge Wether the answer is validate</span>
            flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dt<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Enum the first bit</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//Enum the second Bit</span>
        nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span>dt<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span>dt<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cin<span class="token operator">>></span>dt<span class="token punctuation">;</span>
    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        n<span class="token operator">=</span>len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        n<span class="token operator">=</span><span class="token number">9</span><span class="token operator">+</span><span class="token punctuation">(</span>len<span class="token number">-9</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Search-Algorithms </category>
            
            <category> DFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> JiSuanKe </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSK-QingYunServer-Easy]]></title>
      <url>/2016/06/05/JSK-QingYunServer/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Problem URL:<a href="http://nanti.jisuanke.com/t/11132" target="_blank" rel="external">QingYunServerNet Strategies</a></p>
<p>Brief Intro Of the problem:<br>    In a non-directive graph There are N vertexes and N-1 edges.Each vertex has an ID.And All of those edges has a weight that is 1.Now you need to calculate the sum of weight between each two vertexes whose IDs’ gcd is one.<br>Data Range:<br>    Easy: N&lt;=50 1&lt;=ID&lt;=500<br>    Medium: N&lt;=10,000 1&lt;=ID&lt;=500<br>    Hard: N&lt;=100,000 1&lt;=ID&lt;=100,000</p>
</blockquote>
<p>Actually,it isn’t a problem related to Graph Theory…Because there are only n-1 edges in the ‘graph’,so it’s actually a tree.But we can take it as a graph.So in easy version,we can simply use Floyd to calculate the shortest path between each vertexes.And then we use function gcd to find two numbers whose gcd is 1.<br>But the complicity of this algorithm is too high to pass the Medium version.So I have an alternative method that uses SPFA,but it also TLE(SAD SAD).I’ll show both of the code.</p>
<p>Official solution is to build up a tree and then BFS.I’ll update standard reference program as soon as it is published.</p>
<p>Note:In the contest,someone used Dijkstra and passed the easy version,I’ll show the code at the end of this passage.</p>
<p>Solution:<br>A.Floyd(Passed):</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">%</span>b<span class="token operator">?</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ids<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> f<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>f<span class="token operator">>></span>t<span class="token punctuation">;</span>
        g<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                ans<span class="token operator">+</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>B.SPFA(TLE-&gt;but it’s a good solution):</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">100001</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> EID<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> first<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>Next<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ns<span class="token punctuation">;</span>
<span class="token keyword">int</span> ids<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tgt<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tgtc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag1<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">%</span>b<span class="token operator">?</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> F<span class="token punctuation">,</span><span class="token keyword">int</span> T<span class="token punctuation">,</span><span class="token keyword">int</span> W<span class="token punctuation">)</span><span class="token punctuation">{</span>
    w<span class="token punctuation">[</span><span class="token operator">++</span>EID<span class="token punctuation">]</span><span class="token operator">=</span>W<span class="token punctuation">;</span>
    Next<span class="token punctuation">[</span>EID<span class="token punctuation">]</span><span class="token operator">=</span>first<span class="token punctuation">[</span>F<span class="token punctuation">]</span><span class="token punctuation">;</span>
    v<span class="token punctuation">[</span>EID<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token punctuation">;</span>
    first<span class="token punctuation">[</span>F<span class="token punctuation">]</span><span class="token operator">=</span>EID<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">getBP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>ns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>ns<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> ids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                flag1<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                tgt<span class="token punctuation">[</span><span class="token operator">++</span>tgtc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                tgt<span class="token punctuation">[</span>tgtc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>ids<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>Next<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>ns<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>ns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> uu<span class="token punctuation">,</span>vv<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>uu<span class="token operator">>></span>vv<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>uu<span class="token punctuation">,</span>vv<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>vv<span class="token punctuation">,</span>uu<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">getBP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">resetDist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">collectData</span><span class="token punctuation">(</span><span class="token keyword">int</span> ed<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ans<span class="token operator">+</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span><span class="token keyword">int</span> ed<span class="token punctuation">)</span><span class="token punctuation">{</span>
    dist<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>first<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>Next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dist<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                vis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>ns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>INF<span class="token punctuation">)</span>
                <span class="token function">collectData</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">resetDist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">collectData</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resetDist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">resetDist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>tgtc<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">spfa</span><span class="token punctuation">(</span>tgt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tgt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>C.Dijkstra(Java Version):</p>
<pre class="line-numbers language-Java"><code class="language-Java">import java.util.Scanner;


public class Main {

    private static int n, u;
    private static int inf = 999999999;
    private static int[][] map;
    private static int[][] count;
    private static int sum=0;

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        int[] data = new int[n];
        for (int i = 0; i < data.length; i++) {
            data[i] = sc.nextInt();
        }
        count=new int[n-1][n];
        map = new int[n][n];
        for (int i = 0; i < n; i++) {  
            for (int j = 0; j < n; j++) {  
                map[i][j] = inf;  
            }  
            map[i][i] = 0;  
        }
        for (int i = 1; i < n; i++) {
            int p1 = sc.nextInt() - 1;
            int p2 = sc.nextInt() - 1;
            map[p1][p2] = 1;
            map[p2][p1] = 1;
        }
        for (int i = 0; i < data.length-1 ; i++) {
                dis(i);
        }
        for (int i = 0; i < data.length-1; i++) {
            if (i+1<data.length) {
                for (int j = i+1; j < data.length; j++) {
                    if(is_prime(data[i], data[j])==1 ){
                        sum+=count[i][j];
                    }
                }
            }
        }
        System.out.println(sum);
    }
    private static void dis(int star) {
        // TODO Auto-generated method stub
        int[] dis = new int[n];
        for (int i = 0; i < n; i++) {
            dis[i] = map[star][i];
        }

        int[] book = new int[n];
        book[star] = 1;
        for (int i = 0; i < n - 1; i++) {
            int min = inf;
            for (int j = 0; j < n; j++) {
                if (book[j] == 0 && dis[j] < min) {
                    min = dis[j];
                    u = j;
                }
            }
            book[u] = 1;
            for (int v = 0; v < n; v++) {
                if (map[u][v] < inf) {
                    if (dis[v] > dis[u] + map[u][v]) {
                        dis[v] = dis[u] + map[u][v];
                    }
                }
            }
        }
//      for (int i = 0; i < n; i++) {
//          System.out.print(dis[i] + "\t");
//      }
        count[star]=dis;

    }

    private static int is_prime(int a, int b) {
        // TODO Auto-generated method stub
        if (a < b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        int c;
        while ((c = a % b) != 0) {
            a = b;
            b = c;
        }
        return b;
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Contest-2016 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> ACM </tag>
            
            <tag> JiSuanKe </tag>
            
            <tag> Contest </tag>
            
            <tag> Graph Theory </tag>
            
            <tag> ShortestPath </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kruskal Algorithm]]></title>
      <url>/2016/06/05/Kruskal-Intro/</url>
      <content type="html"><![CDATA[<p>Kruskal is an efficient algorithm to calculate a minium spwan tree(MST).Its idea is to sort all edges and then choose edges from the shortest to the longest until all vertex are in one set.It can be facilitated by using Union Find(Use it to handle the conversion of vertexes)</p>
<p>the template of kurskal algorithm:</p>
<pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <queue>
using namespace std;
const int maxm=100;
struct edge{
  int n;
  int f,t,w;
}e[maxn];
int ans[maxn];
int ecnt=0;
bool mark[maxn];
int f[maxn];
void init(){
 for(int i=0;i<maxn;i++){
   f[i]=i;
 }
}

void qst(){
 sort(e,e+ecnt);
}

bool ismark(int j){
 return mark[j];
}

bool same(int i,int j){
 while(f[i]!=i){
   i=f[i];
 }
 while(f[j]!=j){
   j=f[j];
 }
 return i==j;
}

void Union(int i,int j){
 while(f[i]!=i){
   i=f[i];
 }
 f[j]=i;
}

bool in(){
 int t,w,f,t;
 while(scanf("%d%d%d",&edge[i].f,&edge[i].t,&edge[i].w)!=EOF){
   if(edge[i].f && edge[i].t && edge[i].w==0){
     return true;
   }
   ecnt++;
   continue;
 }
 return false;
}

void getans(){
 for(int i=0;i<ecnt;i++){
   if(!same(e[i].f,e[i.t]) && !ismark(e[i].f) &&!ismark(e[i].t)){
     ans[i]=e[i].f+1;
     ans[i+1]=e[i].t+1;
     mark(e[i].f);
     mark(e[i].t);
   }
 }
}

int main(){
 init();
 in();
 qst();
 getans();
 for(int i=0;i<ecnt;i++){
   cout<<ans[i]<<" ";
 }
 return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Graph Theory </tag>
            
            <tag> Minium Spawn Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SPFA Algorithm]]></title>
      <url>/2016/06/05/SPFA-Intro/</url>
      <content type="html"><![CDATA[<p>SPFA is a single source Shortest path algorithm.It is a optimized version of Bellman-Ford Algorithm.It used a queue to store each vertex that is being visited.<br>The advantage of SPFA is that it can handle a graph that the weight of some edges are negative.But it cannot handle negative circles.</p>
<p>The SPFA Template implement by using adjacent matrix:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span>
queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> path<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>MAXN<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>MAXN<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Status <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>
  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//Update Distance info</span>
        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>
        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>
  stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>
  <span class="token keyword">int</span> t<span class="token operator">=</span>path<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">!=</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span>
     s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
     t<span class="token operator">=</span>path<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> edges<span class="token punctuation">;</span>
  cin<span class="token operator">>></span>edges<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>edges<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>u<span class="token operator">>></span>v<span class="token operator">>></span>w<span class="token punctuation">;</span>
    g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//g[v][u]=w; -->add if it isn't a digraph</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>
  cin<span class="token operator">>></span>u<span class="token operator">>></span>v<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"w:"</span><span class="token operator">&lt;&lt;</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"path:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token function">show</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Graph Theory </tag>
            
            <tag> Shortest Path </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LuoguOJ--P1280--Nick's Tasks]]></title>
      <url>/2016/06/05/LuoguOJP1280/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Problem URL:<a href="http://www.luogu.org/problem/show?pid=1280" target="_blank" rel="external">Nick’s Problem</a></p>
</blockquote>
<p>It is obviously a Dynamic Programming Problem.The status transition function is :</p>
<blockquote>
<p>f[i]=max(f[i],f[i]+task[j,i]) if(task[j][0]==i)  -&gt;If i moment have task<br>f[i]=f[i-1]+1 if(task[j][0]!=i) -&gt; If i moment doesn’t have task</p>
</blockquote>
<p>f[i]:The maximum break time Nick can get at time i;<br>task[i][0/1]:the start time and end time of the i th task.</p>
<p>initially,f[i]=0,task[i][j]=0;</p>
<p>Source code shows blow:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">100001</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> task<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tot<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>tot<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">>></span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> haveTask<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>tot<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        haveTask<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>task<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                haveTask<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token operator">+</span>task<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>haveTask<span class="token punctuation">)</span><span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NOIP </tag>
            
            <tag> LuoguOJ </tag>
            
            <tag> Segment DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LuoguOJ--P1162-Fill the Color]]></title>
      <url>/2016/06/05/LuoguP1162/</url>
      <content type="html"><![CDATA[<p>Problem URL:<a href="http://www.luogu.org/problem/show?pid=1162" target="_blank" rel="external">Fill The Color</a><br>This problem is a traditional DFS problem.But is surely have some fancy technique to solve this problem.<br>There are two ways to achieve that.First,is to search the border and then fill ‘2’ in each circles.This way is tough,because it is hard to judge the real border.However,the second way,we can just initially fill up all ‘2’ in the map,and then alter those ‘2’s that aren’t in circles.It is much more easier than the first one because it is easy to judge the border.<br>The Source code is showed below:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dfs_map</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>n<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> j<span class="token operator">></span>n<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">||</span> j<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token function">dfs_map</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dfs_map</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dfs_map</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dfs_map</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
      vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">dfs_map</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      cout<span class="token operator">&lt;&lt;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Search-Algorithms </category>
            
            <category> DFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NOIP </tag>
            
            <tag> LuoguOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LuoguOJ--P1071--潜伏者]]></title>
      <url>/2016/06/05/LuoguP1071/</url>
      <content type="html"><![CDATA[<p>Problem URL:<a href="http://www.luogu.org/problem/show?pid=1071" target="_blank" rel="external">Spine</a><br>事实上这是一道很简单的模拟…与其说是个字符串，不如说是模拟好。其中需要注意两点，一就是有没有重复定义的，这个事实上可以在输入的时候扫出来;二就是扫描有没有某些字母没有对应密字。剩下就是Pure Simulation了<br>题解如下:</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> list<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> enc<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> raw<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len1<span class="token punctuation">,</span>len2<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>enc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  len1<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">spaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>len1<span class="token operator">!=</span>len2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Failed"</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">[</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      cout<span class="token operator">&lt;&lt;</span><span class="token string">"Failed"</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vis<span class="token punctuation">[</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    list<span class="token punctuation">[</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">verti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      cout<span class="token operator">&lt;&lt;</span><span class="token string">"Failed"</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>list<span class="token punctuation">[</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// freopen("test.in","r",stdin);</span>
  <span class="token comment" spellcheck="true">// freopen("test.out","w",stdout);</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">spaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">verti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> String-Processing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NOIP </tag>
            
            <tag> LuoguOJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/06/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Undefined </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Homework-2016-6]]></title>
      <url>/1970/01/01/Homework-2016-6/</url>
      <content type="html"><![CDATA[<p>Summer vacation is coming,but I’m not happy at all.Cuz there are lots of things waiting me to kill..Such as TOEFL test!Anyway,this post is created on 2016-6-18 and it will give out the solution to the homework of NOIP Class.</p>
<p>T1:<a href="http://ad1024.github.io/2016/06/18/UVA1218-Perfect-Service/" target="_blank" rel="external">UVA1218 Perfect Service</a><br>T2:<a href="http://ad1024.github.io/2016/06/19/UVA1210-Sum-of-Consecutive-Prime-Numbers/" target="_blank" rel="external">UVA1210 Sum of Consecutive Prime Numbers</a><br>T3:<a href="http://ad1024.github.io/2016/06/19/UVA11491-Erasing-and-Winning/" target="_blank" rel="external">UVA11491-Erasing and Winning</a><br>T4:<a href="http://ad1024.github.io/2016/06/19/UVA10048-Audiophobia/" target="_blank" rel="external">UVA10048 Audiophobia</a></p>
]]></content>
      
        <categories>
            
            <category> Learning in BNDS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OI </tag>
            
            <tag> NOIP </tag>
            
            <tag> BNDS </tag>
            
            <tag> Studying </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
